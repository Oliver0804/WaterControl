
WaterControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d6c  08002d6c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002d6c  08002d6c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d6c  08002d6c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000020  08002d94  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08002d94  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006202  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4e  00000000  00000000  0002624a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00027c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004c8  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f175  00000000  00000000  00028720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008db8  00000000  00000000  00037895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056e50  00000000  00000000  0004064d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009749d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001218  00000000  00000000  000974f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ce4 	.word	0x08002ce4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08002ce4 	.word	0x08002ce4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4698      	mov	r8, r3
 800022e:	030c      	lsls	r4, r1, #12
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	0006      	movs	r6, r0
 8000234:	4692      	mov	sl, r2
 8000236:	b087      	sub	sp, #28
 8000238:	0b24      	lsrs	r4, r4, #12
 800023a:	0d5b      	lsrs	r3, r3, #21
 800023c:	0fcf      	lsrs	r7, r1, #31
 800023e:	2b00      	cmp	r3, #0
 8000240:	d06c      	beq.n	800031c <__aeabi_dmul+0xfc>
 8000242:	4add      	ldr	r2, [pc, #884]	; (80005b8 <__aeabi_dmul+0x398>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d100      	bne.n	800024a <__aeabi_dmul+0x2a>
 8000248:	e086      	b.n	8000358 <__aeabi_dmul+0x138>
 800024a:	0f42      	lsrs	r2, r0, #29
 800024c:	00e4      	lsls	r4, r4, #3
 800024e:	4314      	orrs	r4, r2
 8000250:	2280      	movs	r2, #128	; 0x80
 8000252:	0412      	lsls	r2, r2, #16
 8000254:	4314      	orrs	r4, r2
 8000256:	4ad9      	ldr	r2, [pc, #868]	; (80005bc <__aeabi_dmul+0x39c>)
 8000258:	00c5      	lsls	r5, r0, #3
 800025a:	4694      	mov	ip, r2
 800025c:	4463      	add	r3, ip
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2300      	movs	r3, #0
 8000262:	4699      	mov	r9, r3
 8000264:	469b      	mov	fp, r3
 8000266:	4643      	mov	r3, r8
 8000268:	4642      	mov	r2, r8
 800026a:	031e      	lsls	r6, r3, #12
 800026c:	0fd2      	lsrs	r2, r2, #31
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	4650      	mov	r0, sl
 8000272:	4690      	mov	r8, r2
 8000274:	0b36      	lsrs	r6, r6, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	d100      	bne.n	800027c <__aeabi_dmul+0x5c>
 800027a:	e078      	b.n	800036e <__aeabi_dmul+0x14e>
 800027c:	4ace      	ldr	r2, [pc, #824]	; (80005b8 <__aeabi_dmul+0x398>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d01d      	beq.n	80002be <__aeabi_dmul+0x9e>
 8000282:	49ce      	ldr	r1, [pc, #824]	; (80005bc <__aeabi_dmul+0x39c>)
 8000284:	0f42      	lsrs	r2, r0, #29
 8000286:	468c      	mov	ip, r1
 8000288:	9900      	ldr	r1, [sp, #0]
 800028a:	4463      	add	r3, ip
 800028c:	00f6      	lsls	r6, r6, #3
 800028e:	468c      	mov	ip, r1
 8000290:	4316      	orrs	r6, r2
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	449c      	add	ip, r3
 8000296:	0412      	lsls	r2, r2, #16
 8000298:	4663      	mov	r3, ip
 800029a:	4316      	orrs	r6, r2
 800029c:	00c2      	lsls	r2, r0, #3
 800029e:	2000      	movs	r0, #0
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	9900      	ldr	r1, [sp, #0]
 80002a4:	4643      	mov	r3, r8
 80002a6:	3101      	adds	r1, #1
 80002a8:	468c      	mov	ip, r1
 80002aa:	4649      	mov	r1, r9
 80002ac:	407b      	eors	r3, r7
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	290f      	cmp	r1, #15
 80002b2:	d900      	bls.n	80002b6 <__aeabi_dmul+0x96>
 80002b4:	e07e      	b.n	80003b4 <__aeabi_dmul+0x194>
 80002b6:	4bc2      	ldr	r3, [pc, #776]	; (80005c0 <__aeabi_dmul+0x3a0>)
 80002b8:	0089      	lsls	r1, r1, #2
 80002ba:	5859      	ldr	r1, [r3, r1]
 80002bc:	468f      	mov	pc, r1
 80002be:	4652      	mov	r2, sl
 80002c0:	9b00      	ldr	r3, [sp, #0]
 80002c2:	4332      	orrs	r2, r6
 80002c4:	d000      	beq.n	80002c8 <__aeabi_dmul+0xa8>
 80002c6:	e156      	b.n	8000576 <__aeabi_dmul+0x356>
 80002c8:	49bb      	ldr	r1, [pc, #748]	; (80005b8 <__aeabi_dmul+0x398>)
 80002ca:	2600      	movs	r6, #0
 80002cc:	468c      	mov	ip, r1
 80002ce:	4463      	add	r3, ip
 80002d0:	4649      	mov	r1, r9
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2302      	movs	r3, #2
 80002d6:	4319      	orrs	r1, r3
 80002d8:	4689      	mov	r9, r1
 80002da:	2002      	movs	r0, #2
 80002dc:	e7e1      	b.n	80002a2 <__aeabi_dmul+0x82>
 80002de:	4643      	mov	r3, r8
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	0034      	movs	r4, r6
 80002e4:	0015      	movs	r5, r2
 80002e6:	4683      	mov	fp, r0
 80002e8:	465b      	mov	r3, fp
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d05e      	beq.n	80003ac <__aeabi_dmul+0x18c>
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d100      	bne.n	80002f4 <__aeabi_dmul+0xd4>
 80002f2:	e1f3      	b.n	80006dc <__aeabi_dmul+0x4bc>
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d000      	beq.n	80002fa <__aeabi_dmul+0xda>
 80002f8:	e118      	b.n	800052c <__aeabi_dmul+0x30c>
 80002fa:	2200      	movs	r2, #0
 80002fc:	2400      	movs	r4, #0
 80002fe:	2500      	movs	r5, #0
 8000300:	9b01      	ldr	r3, [sp, #4]
 8000302:	0512      	lsls	r2, r2, #20
 8000304:	4322      	orrs	r2, r4
 8000306:	07db      	lsls	r3, r3, #31
 8000308:	431a      	orrs	r2, r3
 800030a:	0028      	movs	r0, r5
 800030c:	0011      	movs	r1, r2
 800030e:	b007      	add	sp, #28
 8000310:	bcf0      	pop	{r4, r5, r6, r7}
 8000312:	46bb      	mov	fp, r7
 8000314:	46b2      	mov	sl, r6
 8000316:	46a9      	mov	r9, r5
 8000318:	46a0      	mov	r8, r4
 800031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031c:	0025      	movs	r5, r4
 800031e:	4305      	orrs	r5, r0
 8000320:	d100      	bne.n	8000324 <__aeabi_dmul+0x104>
 8000322:	e141      	b.n	80005a8 <__aeabi_dmul+0x388>
 8000324:	2c00      	cmp	r4, #0
 8000326:	d100      	bne.n	800032a <__aeabi_dmul+0x10a>
 8000328:	e1ad      	b.n	8000686 <__aeabi_dmul+0x466>
 800032a:	0020      	movs	r0, r4
 800032c:	f000 fa40 	bl	80007b0 <__clzsi2>
 8000330:	0001      	movs	r1, r0
 8000332:	0002      	movs	r2, r0
 8000334:	390b      	subs	r1, #11
 8000336:	231d      	movs	r3, #29
 8000338:	0010      	movs	r0, r2
 800033a:	1a5b      	subs	r3, r3, r1
 800033c:	0031      	movs	r1, r6
 800033e:	0035      	movs	r5, r6
 8000340:	3808      	subs	r0, #8
 8000342:	4084      	lsls	r4, r0
 8000344:	40d9      	lsrs	r1, r3
 8000346:	4085      	lsls	r5, r0
 8000348:	430c      	orrs	r4, r1
 800034a:	489e      	ldr	r0, [pc, #632]	; (80005c4 <__aeabi_dmul+0x3a4>)
 800034c:	1a83      	subs	r3, r0, r2
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2300      	movs	r3, #0
 8000352:	4699      	mov	r9, r3
 8000354:	469b      	mov	fp, r3
 8000356:	e786      	b.n	8000266 <__aeabi_dmul+0x46>
 8000358:	0005      	movs	r5, r0
 800035a:	4325      	orrs	r5, r4
 800035c:	d000      	beq.n	8000360 <__aeabi_dmul+0x140>
 800035e:	e11c      	b.n	800059a <__aeabi_dmul+0x37a>
 8000360:	2208      	movs	r2, #8
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2302      	movs	r3, #2
 8000366:	2400      	movs	r4, #0
 8000368:	4691      	mov	r9, r2
 800036a:	469b      	mov	fp, r3
 800036c:	e77b      	b.n	8000266 <__aeabi_dmul+0x46>
 800036e:	4652      	mov	r2, sl
 8000370:	4332      	orrs	r2, r6
 8000372:	d100      	bne.n	8000376 <__aeabi_dmul+0x156>
 8000374:	e10a      	b.n	800058c <__aeabi_dmul+0x36c>
 8000376:	2e00      	cmp	r6, #0
 8000378:	d100      	bne.n	800037c <__aeabi_dmul+0x15c>
 800037a:	e176      	b.n	800066a <__aeabi_dmul+0x44a>
 800037c:	0030      	movs	r0, r6
 800037e:	f000 fa17 	bl	80007b0 <__clzsi2>
 8000382:	0002      	movs	r2, r0
 8000384:	3a0b      	subs	r2, #11
 8000386:	231d      	movs	r3, #29
 8000388:	0001      	movs	r1, r0
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	4652      	mov	r2, sl
 800038e:	3908      	subs	r1, #8
 8000390:	40da      	lsrs	r2, r3
 8000392:	408e      	lsls	r6, r1
 8000394:	4316      	orrs	r6, r2
 8000396:	4652      	mov	r2, sl
 8000398:	408a      	lsls	r2, r1
 800039a:	9b00      	ldr	r3, [sp, #0]
 800039c:	4989      	ldr	r1, [pc, #548]	; (80005c4 <__aeabi_dmul+0x3a4>)
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	0003      	movs	r3, r0
 80003a2:	468c      	mov	ip, r1
 80003a4:	4463      	add	r3, ip
 80003a6:	2000      	movs	r0, #0
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	e77a      	b.n	80002a2 <__aeabi_dmul+0x82>
 80003ac:	2400      	movs	r4, #0
 80003ae:	2500      	movs	r5, #0
 80003b0:	4a81      	ldr	r2, [pc, #516]	; (80005b8 <__aeabi_dmul+0x398>)
 80003b2:	e7a5      	b.n	8000300 <__aeabi_dmul+0xe0>
 80003b4:	0c2f      	lsrs	r7, r5, #16
 80003b6:	042d      	lsls	r5, r5, #16
 80003b8:	0c2d      	lsrs	r5, r5, #16
 80003ba:	002b      	movs	r3, r5
 80003bc:	0c11      	lsrs	r1, r2, #16
 80003be:	0412      	lsls	r2, r2, #16
 80003c0:	0c12      	lsrs	r2, r2, #16
 80003c2:	4353      	muls	r3, r2
 80003c4:	4698      	mov	r8, r3
 80003c6:	0013      	movs	r3, r2
 80003c8:	0028      	movs	r0, r5
 80003ca:	437b      	muls	r3, r7
 80003cc:	4699      	mov	r9, r3
 80003ce:	4348      	muls	r0, r1
 80003d0:	4448      	add	r0, r9
 80003d2:	4683      	mov	fp, r0
 80003d4:	4640      	mov	r0, r8
 80003d6:	000b      	movs	r3, r1
 80003d8:	0c00      	lsrs	r0, r0, #16
 80003da:	4682      	mov	sl, r0
 80003dc:	4658      	mov	r0, fp
 80003de:	437b      	muls	r3, r7
 80003e0:	4450      	add	r0, sl
 80003e2:	9302      	str	r3, [sp, #8]
 80003e4:	4581      	cmp	r9, r0
 80003e6:	d906      	bls.n	80003f6 <__aeabi_dmul+0x1d6>
 80003e8:	469a      	mov	sl, r3
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	025b      	lsls	r3, r3, #9
 80003ee:	4699      	mov	r9, r3
 80003f0:	44ca      	add	sl, r9
 80003f2:	4653      	mov	r3, sl
 80003f4:	9302      	str	r3, [sp, #8]
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	469b      	mov	fp, r3
 80003fa:	4643      	mov	r3, r8
 80003fc:	041b      	lsls	r3, r3, #16
 80003fe:	0400      	lsls	r0, r0, #16
 8000400:	0c1b      	lsrs	r3, r3, #16
 8000402:	4698      	mov	r8, r3
 8000404:	0003      	movs	r3, r0
 8000406:	4443      	add	r3, r8
 8000408:	9304      	str	r3, [sp, #16]
 800040a:	0c33      	lsrs	r3, r6, #16
 800040c:	4699      	mov	r9, r3
 800040e:	002b      	movs	r3, r5
 8000410:	0436      	lsls	r6, r6, #16
 8000412:	0c36      	lsrs	r6, r6, #16
 8000414:	4373      	muls	r3, r6
 8000416:	4698      	mov	r8, r3
 8000418:	0033      	movs	r3, r6
 800041a:	437b      	muls	r3, r7
 800041c:	469a      	mov	sl, r3
 800041e:	464b      	mov	r3, r9
 8000420:	435d      	muls	r5, r3
 8000422:	435f      	muls	r7, r3
 8000424:	4643      	mov	r3, r8
 8000426:	4455      	add	r5, sl
 8000428:	0c18      	lsrs	r0, r3, #16
 800042a:	1940      	adds	r0, r0, r5
 800042c:	4582      	cmp	sl, r0
 800042e:	d903      	bls.n	8000438 <__aeabi_dmul+0x218>
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	025b      	lsls	r3, r3, #9
 8000434:	469a      	mov	sl, r3
 8000436:	4457      	add	r7, sl
 8000438:	0c05      	lsrs	r5, r0, #16
 800043a:	19eb      	adds	r3, r5, r7
 800043c:	9305      	str	r3, [sp, #20]
 800043e:	4643      	mov	r3, r8
 8000440:	041d      	lsls	r5, r3, #16
 8000442:	0c2d      	lsrs	r5, r5, #16
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	1940      	adds	r0, r0, r5
 8000448:	0c25      	lsrs	r5, r4, #16
 800044a:	0424      	lsls	r4, r4, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	0027      	movs	r7, r4
 8000450:	4357      	muls	r7, r2
 8000452:	436a      	muls	r2, r5
 8000454:	4690      	mov	r8, r2
 8000456:	002a      	movs	r2, r5
 8000458:	0c3b      	lsrs	r3, r7, #16
 800045a:	469a      	mov	sl, r3
 800045c:	434a      	muls	r2, r1
 800045e:	4361      	muls	r1, r4
 8000460:	4441      	add	r1, r8
 8000462:	4451      	add	r1, sl
 8000464:	4483      	add	fp, r0
 8000466:	4588      	cmp	r8, r1
 8000468:	d903      	bls.n	8000472 <__aeabi_dmul+0x252>
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	025b      	lsls	r3, r3, #9
 800046e:	4698      	mov	r8, r3
 8000470:	4442      	add	r2, r8
 8000472:	043f      	lsls	r7, r7, #16
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	0c3f      	lsrs	r7, r7, #16
 8000478:	0409      	lsls	r1, r1, #16
 800047a:	19c9      	adds	r1, r1, r7
 800047c:	0027      	movs	r7, r4
 800047e:	4698      	mov	r8, r3
 8000480:	464b      	mov	r3, r9
 8000482:	4377      	muls	r7, r6
 8000484:	435c      	muls	r4, r3
 8000486:	436e      	muls	r6, r5
 8000488:	435d      	muls	r5, r3
 800048a:	0c3b      	lsrs	r3, r7, #16
 800048c:	4699      	mov	r9, r3
 800048e:	19a4      	adds	r4, r4, r6
 8000490:	444c      	add	r4, r9
 8000492:	4442      	add	r2, r8
 8000494:	9503      	str	r5, [sp, #12]
 8000496:	42a6      	cmp	r6, r4
 8000498:	d904      	bls.n	80004a4 <__aeabi_dmul+0x284>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	025b      	lsls	r3, r3, #9
 800049e:	4698      	mov	r8, r3
 80004a0:	4445      	add	r5, r8
 80004a2:	9503      	str	r5, [sp, #12]
 80004a4:	9b02      	ldr	r3, [sp, #8]
 80004a6:	043f      	lsls	r7, r7, #16
 80004a8:	445b      	add	r3, fp
 80004aa:	001e      	movs	r6, r3
 80004ac:	4283      	cmp	r3, r0
 80004ae:	4180      	sbcs	r0, r0
 80004b0:	0423      	lsls	r3, r4, #16
 80004b2:	4698      	mov	r8, r3
 80004b4:	9b05      	ldr	r3, [sp, #20]
 80004b6:	0c3f      	lsrs	r7, r7, #16
 80004b8:	4447      	add	r7, r8
 80004ba:	4698      	mov	r8, r3
 80004bc:	1876      	adds	r6, r6, r1
 80004be:	428e      	cmp	r6, r1
 80004c0:	4189      	sbcs	r1, r1
 80004c2:	4447      	add	r7, r8
 80004c4:	4240      	negs	r0, r0
 80004c6:	183d      	adds	r5, r7, r0
 80004c8:	46a8      	mov	r8, r5
 80004ca:	4693      	mov	fp, r2
 80004cc:	4249      	negs	r1, r1
 80004ce:	468a      	mov	sl, r1
 80004d0:	44c3      	add	fp, r8
 80004d2:	429f      	cmp	r7, r3
 80004d4:	41bf      	sbcs	r7, r7
 80004d6:	4580      	cmp	r8, r0
 80004d8:	4180      	sbcs	r0, r0
 80004da:	9b03      	ldr	r3, [sp, #12]
 80004dc:	44da      	add	sl, fp
 80004de:	4698      	mov	r8, r3
 80004e0:	4653      	mov	r3, sl
 80004e2:	4240      	negs	r0, r0
 80004e4:	427f      	negs	r7, r7
 80004e6:	4307      	orrs	r7, r0
 80004e8:	0c24      	lsrs	r4, r4, #16
 80004ea:	4593      	cmp	fp, r2
 80004ec:	4192      	sbcs	r2, r2
 80004ee:	458a      	cmp	sl, r1
 80004f0:	4189      	sbcs	r1, r1
 80004f2:	193f      	adds	r7, r7, r4
 80004f4:	0ddc      	lsrs	r4, r3, #23
 80004f6:	9b04      	ldr	r3, [sp, #16]
 80004f8:	0275      	lsls	r5, r6, #9
 80004fa:	431d      	orrs	r5, r3
 80004fc:	1e68      	subs	r0, r5, #1
 80004fe:	4185      	sbcs	r5, r0
 8000500:	4653      	mov	r3, sl
 8000502:	4252      	negs	r2, r2
 8000504:	4249      	negs	r1, r1
 8000506:	430a      	orrs	r2, r1
 8000508:	18bf      	adds	r7, r7, r2
 800050a:	4447      	add	r7, r8
 800050c:	0df6      	lsrs	r6, r6, #23
 800050e:	027f      	lsls	r7, r7, #9
 8000510:	4335      	orrs	r5, r6
 8000512:	025a      	lsls	r2, r3, #9
 8000514:	433c      	orrs	r4, r7
 8000516:	4315      	orrs	r5, r2
 8000518:	01fb      	lsls	r3, r7, #7
 800051a:	d400      	bmi.n	800051e <__aeabi_dmul+0x2fe>
 800051c:	e0c1      	b.n	80006a2 <__aeabi_dmul+0x482>
 800051e:	2101      	movs	r1, #1
 8000520:	086a      	lsrs	r2, r5, #1
 8000522:	400d      	ands	r5, r1
 8000524:	4315      	orrs	r5, r2
 8000526:	07e2      	lsls	r2, r4, #31
 8000528:	4315      	orrs	r5, r2
 800052a:	0864      	lsrs	r4, r4, #1
 800052c:	4926      	ldr	r1, [pc, #152]	; (80005c8 <__aeabi_dmul+0x3a8>)
 800052e:	4461      	add	r1, ip
 8000530:	2900      	cmp	r1, #0
 8000532:	dd56      	ble.n	80005e2 <__aeabi_dmul+0x3c2>
 8000534:	076b      	lsls	r3, r5, #29
 8000536:	d009      	beq.n	800054c <__aeabi_dmul+0x32c>
 8000538:	220f      	movs	r2, #15
 800053a:	402a      	ands	r2, r5
 800053c:	2a04      	cmp	r2, #4
 800053e:	d005      	beq.n	800054c <__aeabi_dmul+0x32c>
 8000540:	1d2a      	adds	r2, r5, #4
 8000542:	42aa      	cmp	r2, r5
 8000544:	41ad      	sbcs	r5, r5
 8000546:	426d      	negs	r5, r5
 8000548:	1964      	adds	r4, r4, r5
 800054a:	0015      	movs	r5, r2
 800054c:	01e3      	lsls	r3, r4, #7
 800054e:	d504      	bpl.n	800055a <__aeabi_dmul+0x33a>
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	4a1e      	ldr	r2, [pc, #120]	; (80005cc <__aeabi_dmul+0x3ac>)
 8000554:	00c9      	lsls	r1, r1, #3
 8000556:	4014      	ands	r4, r2
 8000558:	4461      	add	r1, ip
 800055a:	4a1d      	ldr	r2, [pc, #116]	; (80005d0 <__aeabi_dmul+0x3b0>)
 800055c:	4291      	cmp	r1, r2
 800055e:	dd00      	ble.n	8000562 <__aeabi_dmul+0x342>
 8000560:	e724      	b.n	80003ac <__aeabi_dmul+0x18c>
 8000562:	0762      	lsls	r2, r4, #29
 8000564:	08ed      	lsrs	r5, r5, #3
 8000566:	0264      	lsls	r4, r4, #9
 8000568:	0549      	lsls	r1, r1, #21
 800056a:	4315      	orrs	r5, r2
 800056c:	0b24      	lsrs	r4, r4, #12
 800056e:	0d4a      	lsrs	r2, r1, #21
 8000570:	e6c6      	b.n	8000300 <__aeabi_dmul+0xe0>
 8000572:	9701      	str	r7, [sp, #4]
 8000574:	e6b8      	b.n	80002e8 <__aeabi_dmul+0xc8>
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <__aeabi_dmul+0x398>)
 8000578:	2003      	movs	r0, #3
 800057a:	4694      	mov	ip, r2
 800057c:	4463      	add	r3, ip
 800057e:	464a      	mov	r2, r9
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2303      	movs	r3, #3
 8000584:	431a      	orrs	r2, r3
 8000586:	4691      	mov	r9, r2
 8000588:	4652      	mov	r2, sl
 800058a:	e68a      	b.n	80002a2 <__aeabi_dmul+0x82>
 800058c:	4649      	mov	r1, r9
 800058e:	2301      	movs	r3, #1
 8000590:	4319      	orrs	r1, r3
 8000592:	4689      	mov	r9, r1
 8000594:	2600      	movs	r6, #0
 8000596:	2001      	movs	r0, #1
 8000598:	e683      	b.n	80002a2 <__aeabi_dmul+0x82>
 800059a:	220c      	movs	r2, #12
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2303      	movs	r3, #3
 80005a0:	0005      	movs	r5, r0
 80005a2:	4691      	mov	r9, r2
 80005a4:	469b      	mov	fp, r3
 80005a6:	e65e      	b.n	8000266 <__aeabi_dmul+0x46>
 80005a8:	2304      	movs	r3, #4
 80005aa:	4699      	mov	r9, r3
 80005ac:	2300      	movs	r3, #0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	2400      	movs	r4, #0
 80005b4:	469b      	mov	fp, r3
 80005b6:	e656      	b.n	8000266 <__aeabi_dmul+0x46>
 80005b8:	000007ff 	.word	0x000007ff
 80005bc:	fffffc01 	.word	0xfffffc01
 80005c0:	08002d1c 	.word	0x08002d1c
 80005c4:	fffffc0d 	.word	0xfffffc0d
 80005c8:	000003ff 	.word	0x000003ff
 80005cc:	feffffff 	.word	0xfeffffff
 80005d0:	000007fe 	.word	0x000007fe
 80005d4:	2300      	movs	r3, #0
 80005d6:	2480      	movs	r4, #128	; 0x80
 80005d8:	2500      	movs	r5, #0
 80005da:	4a44      	ldr	r2, [pc, #272]	; (80006ec <__aeabi_dmul+0x4cc>)
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	0324      	lsls	r4, r4, #12
 80005e0:	e68e      	b.n	8000300 <__aeabi_dmul+0xe0>
 80005e2:	2001      	movs	r0, #1
 80005e4:	1a40      	subs	r0, r0, r1
 80005e6:	2838      	cmp	r0, #56	; 0x38
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dmul+0x3cc>
 80005ea:	e686      	b.n	80002fa <__aeabi_dmul+0xda>
 80005ec:	281f      	cmp	r0, #31
 80005ee:	dd5b      	ble.n	80006a8 <__aeabi_dmul+0x488>
 80005f0:	221f      	movs	r2, #31
 80005f2:	0023      	movs	r3, r4
 80005f4:	4252      	negs	r2, r2
 80005f6:	1a51      	subs	r1, r2, r1
 80005f8:	40cb      	lsrs	r3, r1
 80005fa:	0019      	movs	r1, r3
 80005fc:	2820      	cmp	r0, #32
 80005fe:	d003      	beq.n	8000608 <__aeabi_dmul+0x3e8>
 8000600:	4a3b      	ldr	r2, [pc, #236]	; (80006f0 <__aeabi_dmul+0x4d0>)
 8000602:	4462      	add	r2, ip
 8000604:	4094      	lsls	r4, r2
 8000606:	4325      	orrs	r5, r4
 8000608:	1e6a      	subs	r2, r5, #1
 800060a:	4195      	sbcs	r5, r2
 800060c:	002a      	movs	r2, r5
 800060e:	430a      	orrs	r2, r1
 8000610:	2107      	movs	r1, #7
 8000612:	000d      	movs	r5, r1
 8000614:	2400      	movs	r4, #0
 8000616:	4015      	ands	r5, r2
 8000618:	4211      	tst	r1, r2
 800061a:	d05b      	beq.n	80006d4 <__aeabi_dmul+0x4b4>
 800061c:	210f      	movs	r1, #15
 800061e:	2400      	movs	r4, #0
 8000620:	4011      	ands	r1, r2
 8000622:	2904      	cmp	r1, #4
 8000624:	d053      	beq.n	80006ce <__aeabi_dmul+0x4ae>
 8000626:	1d11      	adds	r1, r2, #4
 8000628:	4291      	cmp	r1, r2
 800062a:	4192      	sbcs	r2, r2
 800062c:	4252      	negs	r2, r2
 800062e:	18a4      	adds	r4, r4, r2
 8000630:	000a      	movs	r2, r1
 8000632:	0223      	lsls	r3, r4, #8
 8000634:	d54b      	bpl.n	80006ce <__aeabi_dmul+0x4ae>
 8000636:	2201      	movs	r2, #1
 8000638:	2400      	movs	r4, #0
 800063a:	2500      	movs	r5, #0
 800063c:	e660      	b.n	8000300 <__aeabi_dmul+0xe0>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	031b      	lsls	r3, r3, #12
 8000642:	421c      	tst	r4, r3
 8000644:	d009      	beq.n	800065a <__aeabi_dmul+0x43a>
 8000646:	421e      	tst	r6, r3
 8000648:	d107      	bne.n	800065a <__aeabi_dmul+0x43a>
 800064a:	4333      	orrs	r3, r6
 800064c:	031c      	lsls	r4, r3, #12
 800064e:	4643      	mov	r3, r8
 8000650:	0015      	movs	r5, r2
 8000652:	0b24      	lsrs	r4, r4, #12
 8000654:	4a25      	ldr	r2, [pc, #148]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	e652      	b.n	8000300 <__aeabi_dmul+0xe0>
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	0312      	lsls	r2, r2, #12
 800065e:	4314      	orrs	r4, r2
 8000660:	0324      	lsls	r4, r4, #12
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000664:	0b24      	lsrs	r4, r4, #12
 8000666:	9701      	str	r7, [sp, #4]
 8000668:	e64a      	b.n	8000300 <__aeabi_dmul+0xe0>
 800066a:	f000 f8a1 	bl	80007b0 <__clzsi2>
 800066e:	0003      	movs	r3, r0
 8000670:	001a      	movs	r2, r3
 8000672:	3215      	adds	r2, #21
 8000674:	3020      	adds	r0, #32
 8000676:	2a1c      	cmp	r2, #28
 8000678:	dc00      	bgt.n	800067c <__aeabi_dmul+0x45c>
 800067a:	e684      	b.n	8000386 <__aeabi_dmul+0x166>
 800067c:	4656      	mov	r6, sl
 800067e:	3b08      	subs	r3, #8
 8000680:	2200      	movs	r2, #0
 8000682:	409e      	lsls	r6, r3
 8000684:	e689      	b.n	800039a <__aeabi_dmul+0x17a>
 8000686:	f000 f893 	bl	80007b0 <__clzsi2>
 800068a:	0001      	movs	r1, r0
 800068c:	0002      	movs	r2, r0
 800068e:	3115      	adds	r1, #21
 8000690:	3220      	adds	r2, #32
 8000692:	291c      	cmp	r1, #28
 8000694:	dc00      	bgt.n	8000698 <__aeabi_dmul+0x478>
 8000696:	e64e      	b.n	8000336 <__aeabi_dmul+0x116>
 8000698:	0034      	movs	r4, r6
 800069a:	3808      	subs	r0, #8
 800069c:	2500      	movs	r5, #0
 800069e:	4084      	lsls	r4, r0
 80006a0:	e653      	b.n	800034a <__aeabi_dmul+0x12a>
 80006a2:	9b00      	ldr	r3, [sp, #0]
 80006a4:	469c      	mov	ip, r3
 80006a6:	e741      	b.n	800052c <__aeabi_dmul+0x30c>
 80006a8:	4912      	ldr	r1, [pc, #72]	; (80006f4 <__aeabi_dmul+0x4d4>)
 80006aa:	0022      	movs	r2, r4
 80006ac:	4461      	add	r1, ip
 80006ae:	002e      	movs	r6, r5
 80006b0:	408d      	lsls	r5, r1
 80006b2:	408a      	lsls	r2, r1
 80006b4:	40c6      	lsrs	r6, r0
 80006b6:	1e69      	subs	r1, r5, #1
 80006b8:	418d      	sbcs	r5, r1
 80006ba:	4332      	orrs	r2, r6
 80006bc:	432a      	orrs	r2, r5
 80006be:	40c4      	lsrs	r4, r0
 80006c0:	0753      	lsls	r3, r2, #29
 80006c2:	d0b6      	beq.n	8000632 <__aeabi_dmul+0x412>
 80006c4:	210f      	movs	r1, #15
 80006c6:	4011      	ands	r1, r2
 80006c8:	2904      	cmp	r1, #4
 80006ca:	d1ac      	bne.n	8000626 <__aeabi_dmul+0x406>
 80006cc:	e7b1      	b.n	8000632 <__aeabi_dmul+0x412>
 80006ce:	0765      	lsls	r5, r4, #29
 80006d0:	0264      	lsls	r4, r4, #9
 80006d2:	0b24      	lsrs	r4, r4, #12
 80006d4:	08d2      	lsrs	r2, r2, #3
 80006d6:	4315      	orrs	r5, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	e611      	b.n	8000300 <__aeabi_dmul+0xe0>
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0312      	lsls	r2, r2, #12
 80006e0:	4314      	orrs	r4, r2
 80006e2:	0324      	lsls	r4, r4, #12
 80006e4:	4a01      	ldr	r2, [pc, #4]	; (80006ec <__aeabi_dmul+0x4cc>)
 80006e6:	0b24      	lsrs	r4, r4, #12
 80006e8:	e60a      	b.n	8000300 <__aeabi_dmul+0xe0>
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	000007ff 	.word	0x000007ff
 80006f0:	0000043e 	.word	0x0000043e
 80006f4:	0000041e 	.word	0x0000041e

080006f8 <__aeabi_d2iz>:
 80006f8:	000a      	movs	r2, r1
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	4c13      	ldr	r4, [pc, #76]	; (800074c <__aeabi_d2iz+0x54>)
 80006fe:	0053      	lsls	r3, r2, #1
 8000700:	0309      	lsls	r1, r1, #12
 8000702:	0005      	movs	r5, r0
 8000704:	0b09      	lsrs	r1, r1, #12
 8000706:	2000      	movs	r0, #0
 8000708:	0d5b      	lsrs	r3, r3, #21
 800070a:	0fd2      	lsrs	r2, r2, #31
 800070c:	42a3      	cmp	r3, r4
 800070e:	dd04      	ble.n	800071a <__aeabi_d2iz+0x22>
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <__aeabi_d2iz+0x58>)
 8000712:	4283      	cmp	r3, r0
 8000714:	dd02      	ble.n	800071c <__aeabi_d2iz+0x24>
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <__aeabi_d2iz+0x5c>)
 8000718:	18d0      	adds	r0, r2, r3
 800071a:	bd30      	pop	{r4, r5, pc}
 800071c:	2080      	movs	r0, #128	; 0x80
 800071e:	0340      	lsls	r0, r0, #13
 8000720:	4301      	orrs	r1, r0
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <__aeabi_d2iz+0x60>)
 8000724:	1ac0      	subs	r0, r0, r3
 8000726:	281f      	cmp	r0, #31
 8000728:	dd08      	ble.n	800073c <__aeabi_d2iz+0x44>
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <__aeabi_d2iz+0x64>)
 800072c:	1ac3      	subs	r3, r0, r3
 800072e:	40d9      	lsrs	r1, r3
 8000730:	000b      	movs	r3, r1
 8000732:	4258      	negs	r0, r3
 8000734:	2a00      	cmp	r2, #0
 8000736:	d1f0      	bne.n	800071a <__aeabi_d2iz+0x22>
 8000738:	0018      	movs	r0, r3
 800073a:	e7ee      	b.n	800071a <__aeabi_d2iz+0x22>
 800073c:	4c08      	ldr	r4, [pc, #32]	; (8000760 <__aeabi_d2iz+0x68>)
 800073e:	40c5      	lsrs	r5, r0
 8000740:	46a4      	mov	ip, r4
 8000742:	4463      	add	r3, ip
 8000744:	4099      	lsls	r1, r3
 8000746:	000b      	movs	r3, r1
 8000748:	432b      	orrs	r3, r5
 800074a:	e7f2      	b.n	8000732 <__aeabi_d2iz+0x3a>
 800074c:	000003fe 	.word	0x000003fe
 8000750:	0000041d 	.word	0x0000041d
 8000754:	7fffffff 	.word	0x7fffffff
 8000758:	00000433 	.word	0x00000433
 800075c:	00000413 	.word	0x00000413
 8000760:	fffffbed 	.word	0xfffffbed

08000764 <__aeabi_ui2d>:
 8000764:	b510      	push	{r4, lr}
 8000766:	1e04      	subs	r4, r0, #0
 8000768:	d010      	beq.n	800078c <__aeabi_ui2d+0x28>
 800076a:	f000 f821 	bl	80007b0 <__clzsi2>
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <__aeabi_ui2d+0x48>)
 8000770:	1a1b      	subs	r3, r3, r0
 8000772:	280a      	cmp	r0, #10
 8000774:	dc11      	bgt.n	800079a <__aeabi_ui2d+0x36>
 8000776:	220b      	movs	r2, #11
 8000778:	0021      	movs	r1, r4
 800077a:	1a12      	subs	r2, r2, r0
 800077c:	40d1      	lsrs	r1, r2
 800077e:	3015      	adds	r0, #21
 8000780:	030a      	lsls	r2, r1, #12
 8000782:	055b      	lsls	r3, r3, #21
 8000784:	4084      	lsls	r4, r0
 8000786:	0b12      	lsrs	r2, r2, #12
 8000788:	0d5b      	lsrs	r3, r3, #21
 800078a:	e001      	b.n	8000790 <__aeabi_ui2d+0x2c>
 800078c:	2300      	movs	r3, #0
 800078e:	2200      	movs	r2, #0
 8000790:	051b      	lsls	r3, r3, #20
 8000792:	4313      	orrs	r3, r2
 8000794:	0020      	movs	r0, r4
 8000796:	0019      	movs	r1, r3
 8000798:	bd10      	pop	{r4, pc}
 800079a:	0022      	movs	r2, r4
 800079c:	380b      	subs	r0, #11
 800079e:	4082      	lsls	r2, r0
 80007a0:	055b      	lsls	r3, r3, #21
 80007a2:	0312      	lsls	r2, r2, #12
 80007a4:	2400      	movs	r4, #0
 80007a6:	0b12      	lsrs	r2, r2, #12
 80007a8:	0d5b      	lsrs	r3, r3, #21
 80007aa:	e7f1      	b.n	8000790 <__aeabi_ui2d+0x2c>
 80007ac:	0000041e 	.word	0x0000041e

080007b0 <__clzsi2>:
 80007b0:	211c      	movs	r1, #28
 80007b2:	2301      	movs	r3, #1
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	4298      	cmp	r0, r3
 80007b8:	d301      	bcc.n	80007be <__clzsi2+0xe>
 80007ba:	0c00      	lsrs	r0, r0, #16
 80007bc:	3910      	subs	r1, #16
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	4298      	cmp	r0, r3
 80007c2:	d301      	bcc.n	80007c8 <__clzsi2+0x18>
 80007c4:	0a00      	lsrs	r0, r0, #8
 80007c6:	3908      	subs	r1, #8
 80007c8:	091b      	lsrs	r3, r3, #4
 80007ca:	4298      	cmp	r0, r3
 80007cc:	d301      	bcc.n	80007d2 <__clzsi2+0x22>
 80007ce:	0900      	lsrs	r0, r0, #4
 80007d0:	3904      	subs	r1, #4
 80007d2:	a202      	add	r2, pc, #8	; (adr r2, 80007dc <__clzsi2+0x2c>)
 80007d4:	5c10      	ldrb	r0, [r2, r0]
 80007d6:	1840      	adds	r0, r0, r1
 80007d8:	4770      	bx	lr
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	02020304 	.word	0x02020304
 80007e0:	01010101 	.word	0x01010101
	...

080007ec <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	230c      	movs	r3, #12
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f002 fa6a 	bl	8002cd4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000800:	4b32      	ldr	r3, [pc, #200]	; (80008cc <MX_ADC_Init+0xe0>)
 8000802:	4a33      	ldr	r2, [pc, #204]	; (80008d0 <MX_ADC_Init+0xe4>)
 8000804:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_ADC_Init+0xe0>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_ADC_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_ADC_Init+0xe0>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_ADC_Init+0xe0>)
 800081a:	2201      	movs	r2, #1
 800081c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_ADC_Init+0xe0>)
 8000820:	2204      	movs	r2, #4
 8000822:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_ADC_Init+0xe0>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_ADC_Init+0xe0>)
 800082c:	2200      	movs	r2, #0
 800082e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_ADC_Init+0xe0>)
 8000832:	2201      	movs	r2, #1
 8000834:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_ADC_Init+0xe0>)
 8000838:	2200      	movs	r2, #0
 800083a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_ADC_Init+0xe0>)
 800083e:	22c2      	movs	r2, #194	; 0xc2
 8000840:	32ff      	adds	r2, #255	; 0xff
 8000842:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC_Init+0xe0>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_ADC_Init+0xe0>)
 800084c:	2224      	movs	r2, #36	; 0x24
 800084e:	2101      	movs	r1, #1
 8000850:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC_Init+0xe0>)
 8000854:	2201      	movs	r2, #1
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC_Init+0xe0>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fce2 	bl	8001224 <HAL_ADC_Init>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 fbb4 	bl	8000fd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0152      	lsls	r2, r2, #5
 8000874:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2202      	movs	r2, #2
 800087a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800087c:	1d3a      	adds	r2, r7, #4
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ADC_Init+0xe0>)
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 ff68 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800088c:	f000 fba0 	bl	8000fd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_ADC_Init+0xe0>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f000 ff5b 	bl	8001758 <HAL_ADC_ConfigChannel>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80008a6:	f000 fb93 	bl	8000fd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2202      	movs	r2, #2
 80008ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_ADC_Init+0xe0>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 ff4e 	bl	8001758 <HAL_ADC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80008c0:	f000 fb86 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b004      	add	sp, #16
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000098 	.word	0x20000098
 80008d0:	40012400 	.word	0x40012400

080008d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	2414      	movs	r4, #20
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f002 f9f4 	bl	8002cd4 <memset>
  if(adcHandle->Instance==ADC1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a31      	ldr	r2, [pc, #196]	; (80009b8 <HAL_ADC_MspInit+0xe4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d15c      	bne.n	80009b0 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <HAL_ADC_MspInit+0xe8>)
 80008f8:	699a      	ldr	r2, [r3, #24]
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <HAL_ADC_MspInit+0xe8>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0089      	lsls	r1, r1, #2
 8000900:	430a      	orrs	r2, r1
 8000902:	619a      	str	r2, [r3, #24]
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <HAL_ADC_MspInit+0xe8>)
 8000906:	699a      	ldr	r2, [r3, #24]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <HAL_ADC_MspInit+0xe8>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <HAL_ADC_MspInit+0xe8>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0289      	lsls	r1, r1, #10
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <HAL_ADC_MspInit+0xe8>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	029b      	lsls	r3, r3, #10
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = VR1_Pin|VR2_Pin|VR3_Pin;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2203      	movs	r2, #3
 8000938:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	193a      	adds	r2, r7, r4
 8000942:	2390      	movs	r3, #144	; 0x90
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fb79 	bl	8002040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000950:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <HAL_ADC_MspInit+0xf0>)
 8000952:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000978:	2220      	movs	r2, #32
 800097a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0192      	lsls	r2, r2, #6
 8000982:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000986:	0018      	movs	r0, r3
 8000988:	f001 f9c2 	bl	8001d10 <HAL_DMA_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000990:	f000 fb1e 	bl	8000fd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 8000998:	631a      	str	r2, [r3, #48]	; 0x30
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_ADC_MspInit+0xec>)
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	200c      	movs	r0, #12
 80009a6:	f001 f981 	bl	8001cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009aa:	200c      	movs	r0, #12
 80009ac:	f001 f993 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b00b      	add	sp, #44	; 0x2c
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	40012400 	.word	0x40012400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	20000054 	.word	0x20000054
 80009c4:	40020008 	.word	0x40020008

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	430a      	orrs	r2, r1
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_DMA_Init+0x38>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2009      	movs	r0, #9
 80009ec:	f001 f95e 	bl	8001cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f0:	2009      	movs	r0, #9
 80009f2:	f001 f970 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	240c      	movs	r4, #12
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2314      	movs	r3, #20
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f002 f95d 	bl	8002cd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	03c9      	lsls	r1, r1, #15
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	03db      	lsls	r3, r3, #15
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0289      	lsls	r1, r1, #10
 8000a40:	430a      	orrs	r2, r1
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	02c9      	lsls	r1, r1, #11
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	02db      	lsls	r3, r3, #11
 8000a68:	4013      	ands	r3, r2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RELAY_2_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 8000a6e:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <MX_GPIO_Init+0x134>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	2103      	movs	r1, #3
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fc70 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, H9_LED_Pin|H8_Alarm_LED_Pin|RELAY_4_Pin|RELAY_3_Pin, GPIO_PIN_RESET);
 8000a7a:	23c3      	movs	r3, #195	; 0xc3
 8000a7c:	00d9      	lsls	r1, r3, #3
 8000a7e:	2390      	movs	r3, #144	; 0x90
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2200      	movs	r2, #0
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fc68 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_5_GPIO_Port, RELAY_5_Pin, GPIO_PIN_RESET);
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2102      	movs	r1, #2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 fc62 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = RELAY_2_Pin|RELAY_1_Pin;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2203      	movs	r2, #3
 8000a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <MX_GPIO_Init+0x134>)
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	f001 fac3 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = H9_LED_Pin|H8_Alarm_LED_Pin|RELAY_4_Pin|RELAY_3_Pin;
 8000aba:	0021      	movs	r1, r4
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	22c3      	movs	r2, #195	; 0xc3
 8000ac0:	00d2      	lsls	r2, r2, #3
 8000ac2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	000c      	movs	r4, r1
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	193a      	adds	r2, r7, r4
 8000ada:	2390      	movs	r3, #144	; 0x90
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 faad 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = H8_Sync_Pin|H2_Pin|H1_Pin;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	22e0      	movs	r2, #224	; 0xe0
 8000aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2201      	movs	r2, #1
 8000af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	193a      	adds	r2, r7, r4
 8000afa:	2390      	movs	r3, #144	; 0x90
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 fa9d 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_5_Pin;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2201      	movs	r2, #1
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2202      	movs	r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_5_GPIO_Port, &GPIO_InitStruct);
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000b24:	0019      	movs	r1, r3
 8000b26:	0010      	movs	r0, r2
 8000b28:	f001 fa8a 	bl	8002040 <HAL_GPIO_Init>

}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b009      	add	sp, #36	; 0x24
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48001400 	.word	0x48001400
 8000b3c:	48000400 	.word	0x48000400

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f000 fae6 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f9fc 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f7ff ff5a 	bl	8000a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b50:	f7ff ff3a 	bl	80009c8 <MX_DMA_Init>
  MX_ADC_Init();
 8000b54:	f7ff fe4a 	bl	80007ec <MX_ADC_Init>
  //MX_WWDG_Init();
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&ADC_Value, 60);
 8000b58:	49e5      	ldr	r1, [pc, #916]	; (8000ef0 <main+0x3b0>)
 8000b5a:	4be6      	ldr	r3, [pc, #920]	; (8000ef4 <main+0x3b4>)
 8000b5c:	223c      	movs	r2, #60	; 0x3c
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fca0 	bl	80014a4 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      for(i = 0,ad1 =0,ad2=0,ad3=0 ;i < 60;)
 8000b64:	4be4      	ldr	r3, [pc, #912]	; (8000ef8 <main+0x3b8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	4be4      	ldr	r3, [pc, #912]	; (8000efc <main+0x3bc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	4be3      	ldr	r3, [pc, #908]	; (8000f00 <main+0x3c0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	4be3      	ldr	r3, [pc, #908]	; (8000f04 <main+0x3c4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e02c      	b.n	8000bd8 <main+0x98>
      {
          ad1 += ADC_Value[i++];
 8000b7e:	4bde      	ldr	r3, [pc, #888]	; (8000ef8 <main+0x3b8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	b2d1      	uxtb	r1, r2
 8000b86:	4adc      	ldr	r2, [pc, #880]	; (8000ef8 <main+0x3b8>)
 8000b88:	7011      	strb	r1, [r2, #0]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	4bd8      	ldr	r3, [pc, #864]	; (8000ef0 <main+0x3b0>)
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	58d2      	ldr	r2, [r2, r3]
 8000b92:	4bda      	ldr	r3, [pc, #872]	; (8000efc <main+0x3bc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	18d2      	adds	r2, r2, r3
 8000b98:	4bd8      	ldr	r3, [pc, #864]	; (8000efc <main+0x3bc>)
 8000b9a:	601a      	str	r2, [r3, #0]
          ad2 += ADC_Value[i++];
 8000b9c:	4bd6      	ldr	r3, [pc, #856]	; (8000ef8 <main+0x3b8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	b2d1      	uxtb	r1, r2
 8000ba4:	4ad4      	ldr	r2, [pc, #848]	; (8000ef8 <main+0x3b8>)
 8000ba6:	7011      	strb	r1, [r2, #0]
 8000ba8:	001a      	movs	r2, r3
 8000baa:	4bd1      	ldr	r3, [pc, #836]	; (8000ef0 <main+0x3b0>)
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	58d2      	ldr	r2, [r2, r3]
 8000bb0:	4bd3      	ldr	r3, [pc, #844]	; (8000f00 <main+0x3c0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	18d2      	adds	r2, r2, r3
 8000bb6:	4bd2      	ldr	r3, [pc, #840]	; (8000f00 <main+0x3c0>)
 8000bb8:	601a      	str	r2, [r3, #0]
          ad3 += ADC_Value[i++];
 8000bba:	4bcf      	ldr	r3, [pc, #828]	; (8000ef8 <main+0x3b8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	b2d1      	uxtb	r1, r2
 8000bc2:	4acd      	ldr	r2, [pc, #820]	; (8000ef8 <main+0x3b8>)
 8000bc4:	7011      	strb	r1, [r2, #0]
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	4bc9      	ldr	r3, [pc, #804]	; (8000ef0 <main+0x3b0>)
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	58d2      	ldr	r2, [r2, r3]
 8000bce:	4bcd      	ldr	r3, [pc, #820]	; (8000f04 <main+0x3c4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	18d2      	adds	r2, r2, r3
 8000bd4:	4bcb      	ldr	r3, [pc, #812]	; (8000f04 <main+0x3c4>)
 8000bd6:	601a      	str	r2, [r3, #0]
      for(i = 0,ad1 =0,ad2=0,ad3=0 ;i < 60;)
 8000bd8:	4bc7      	ldr	r3, [pc, #796]	; (8000ef8 <main+0x3b8>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b3b      	cmp	r3, #59	; 0x3b
 8000bde:	d9ce      	bls.n	8000b7e <main+0x3e>
      }
      //ADC MAX=4096 409600m=> 409s
      ad1 /= 20;//1-10m
 8000be0:	4bc6      	ldr	r3, [pc, #792]	; (8000efc <main+0x3bc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2114      	movs	r1, #20
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fa8e 	bl	8000108 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	001a      	movs	r2, r3
 8000bf0:	4bc2      	ldr	r3, [pc, #776]	; (8000efc <main+0x3bc>)
 8000bf2:	601a      	str	r2, [r3, #0]
      ad2 /= 20;//3-720m (0.05hr-12hr)
 8000bf4:	4bc2      	ldr	r3, [pc, #776]	; (8000f00 <main+0x3c0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2114      	movs	r1, #20
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fa84 	bl	8000108 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	001a      	movs	r2, r3
 8000c04:	4bbe      	ldr	r3, [pc, #760]	; (8000f00 <main+0x3c0>)
 8000c06:	601a      	str	r2, [r3, #0]
      ad3 /= 20;//0-3m
 8000c08:	4bbe      	ldr	r3, [pc, #760]	; (8000f04 <main+0x3c4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2114      	movs	r1, #20
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fa7a 	bl	8000108 <__udivsi3>
 8000c14:	0003      	movs	r3, r0
 8000c16:	001a      	movs	r2, r3
 8000c18:	4bba      	ldr	r3, [pc, #744]	; (8000f04 <main+0x3c4>)
 8000c1a:	601a      	str	r2, [r3, #0]
      setAutoOntimer=ad1*1.66;		//10/6=1.66
 8000c1c:	4bb7      	ldr	r3, [pc, #732]	; (8000efc <main+0x3bc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fd9f 	bl	8000764 <__aeabi_ui2d>
 8000c26:	4ab8      	ldr	r2, [pc, #736]	; (8000f08 <main+0x3c8>)
 8000c28:	4bb8      	ldr	r3, [pc, #736]	; (8000f0c <main+0x3cc>)
 8000c2a:	f7ff faf9 	bl	8000220 <__aeabi_dmul>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	000b      	movs	r3, r1
 8000c32:	0010      	movs	r0, r2
 8000c34:	0019      	movs	r1, r3
 8000c36:	f7ff fd5f 	bl	80006f8 <__aeabi_d2iz>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	4bb4      	ldr	r3, [pc, #720]	; (8000f10 <main+0x3d0>)
 8000c3e:	601a      	str	r2, [r3, #0]
	  setAutoOfftimer=ad2*120; 		//720m/6m=120
 8000c40:	4baf      	ldr	r3, [pc, #700]	; (8000f00 <main+0x3c0>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	0013      	movs	r3, r2
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	1a9b      	subs	r3, r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	4bb1      	ldr	r3, [pc, #708]	; (8000f14 <main+0x3d4>)
 8000c50:	601a      	str	r2, [r3, #0]
      setDelayOnTimer=ad3/2; 		//409s=6m 409s/2=3m
 8000c52:	4bac      	ldr	r3, [pc, #688]	; (8000f04 <main+0x3c4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	085b      	lsrs	r3, r3, #1
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4baf      	ldr	r3, [pc, #700]	; (8000f18 <main+0x3d8>)
 8000c5c:	601a      	str	r2, [r3, #0]

      if(auto_run&&lastH1!=1&&lastH2!=1){
 8000c5e:	4baf      	ldr	r3, [pc, #700]	; (8000f1c <main+0x3dc>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d05a      	beq.n	8000d1c <main+0x1dc>
 8000c66:	4bae      	ldr	r3, [pc, #696]	; (8000f20 <main+0x3e0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d056      	beq.n	8000d1c <main+0x1dc>
 8000c6e:	4bad      	ldr	r3, [pc, #692]	; (8000f24 <main+0x3e4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d052      	beq.n	8000d1c <main+0x1dc>
    	  switch(state){
 8000c76:	4bac      	ldr	r3, [pc, #688]	; (8000f28 <main+0x3e8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <main+0x144>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d026      	beq.n	8000cd0 <main+0x190>
 8000c82:	e04c      	b.n	8000d1e <main+0x1de>
    	  case 0:
    		  HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, HIGH);
 8000c84:	4ba9      	ldr	r3, [pc, #676]	; (8000f2c <main+0x3ec>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	2102      	movs	r1, #2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f001 fb65 	bl	800235a <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, HIGH);
 8000c90:	4ba6      	ldr	r3, [pc, #664]	; (8000f2c <main+0x3ec>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	2101      	movs	r1, #1
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 fb5f 	bl	800235a <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, HIGH);
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	00d9      	lsls	r1, r3, #3
 8000ca0:	2390      	movs	r3, #144	; 0x90
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 fb57 	bl	800235a <HAL_GPIO_WritePin>
    		  if(autoOfftimer>0){
 8000cac:	4ba0      	ldr	r3, [pc, #640]	; (8000f30 <main+0x3f0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dd05      	ble.n	8000cc0 <main+0x180>
    			  autoOfftimer--;
 8000cb4:	4b9e      	ldr	r3, [pc, #632]	; (8000f30 <main+0x3f0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	4b9d      	ldr	r3, [pc, #628]	; (8000f30 <main+0x3f0>)
 8000cbc:	601a      	str	r2, [r3, #0]
    		  }else{
    			  autoOfftimer=setAutoOfftimer;
    			  state=1;
    		  }

    		  break;
 8000cbe:	e02e      	b.n	8000d1e <main+0x1de>
    			  autoOfftimer=setAutoOfftimer;
 8000cc0:	4b94      	ldr	r3, [pc, #592]	; (8000f14 <main+0x3d4>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <main+0x3f0>)
 8000cc6:	601a      	str	r2, [r3, #0]
    			  state=1;
 8000cc8:	4b97      	ldr	r3, [pc, #604]	; (8000f28 <main+0x3e8>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
    		  break;
 8000cce:	e026      	b.n	8000d1e <main+0x1de>
    	  case 1:
    		  HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, LOW);
 8000cd0:	4b96      	ldr	r3, [pc, #600]	; (8000f2c <main+0x3ec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 fb3f 	bl	800235a <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, LOW);
 8000cdc:	4b93      	ldr	r3, [pc, #588]	; (8000f2c <main+0x3ec>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fb39 	bl	800235a <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, LOW);
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	00d9      	lsls	r1, r3, #3
 8000cec:	2390      	movs	r3, #144	; 0x90
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f001 fb31 	bl	800235a <HAL_GPIO_WritePin>
    		  if(autoOntimer>0){
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	; (8000f34 <main+0x3f4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd05      	ble.n	8000d0c <main+0x1cc>
    			  autoOntimer--;
 8000d00:	4b8c      	ldr	r3, [pc, #560]	; (8000f34 <main+0x3f4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	1e5a      	subs	r2, r3, #1
 8000d06:	4b8b      	ldr	r3, [pc, #556]	; (8000f34 <main+0x3f4>)
 8000d08:	601a      	str	r2, [r3, #0]
    		  }else{
    			  autoOntimer=setAutoOntimer;
    			  state=0;
    		  }
    		  break;
 8000d0a:	e008      	b.n	8000d1e <main+0x1de>
    			  autoOntimer=setAutoOntimer;
 8000d0c:	4b80      	ldr	r3, [pc, #512]	; (8000f10 <main+0x3d0>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b88      	ldr	r3, [pc, #544]	; (8000f34 <main+0x3f4>)
 8000d12:	601a      	str	r2, [r3, #0]
    			  state=0;
 8000d14:	4b84      	ldr	r3, [pc, #528]	; (8000f28 <main+0x3e8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
    		  break;
 8000d1a:	e000      	b.n	8000d1e <main+0x1de>
    	  }
      }
 8000d1c:	46c0      	nop			; (mov r8, r8)
     if(HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin)==0){//H1觸發
 8000d1e:	2390      	movs	r3, #144	; 0x90
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 fafb 	bl	8002320 <HAL_GPIO_ReadPin>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d11d      	bne.n	8000d6a <main+0x22a>
    	 HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, HIGH);
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	00d9      	lsls	r1, r3, #3
 8000d32:	2390      	movs	r3, #144	; 0x90
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	2201      	movs	r2, #1
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fb0e 	bl	800235a <HAL_GPIO_WritePin>

    	 HAL_GPIO_WritePin(H9_LED_GPIO_Port, H9_LED_Pin, LOW);
 8000d3e:	2390      	movs	r3, #144	; 0x90
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	2200      	movs	r2, #0
 8000d44:	2108      	movs	r1, #8
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 fb07 	bl	800235a <HAL_GPIO_WritePin>
    	 lastH1=1;
 8000d4c:	4b74      	ldr	r3, [pc, #464]	; (8000f20 <main+0x3e0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
    	 if(delayOnTimer<setDelayOnTimer){
 8000d52:	4b79      	ldr	r3, [pc, #484]	; (8000f38 <main+0x3f8>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b70      	ldr	r3, [pc, #448]	; (8000f18 <main+0x3d8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	da1e      	bge.n	8000d9c <main+0x25c>
    		 delayOnTimer++;
 8000d5e:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <main+0x3f8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	4b74      	ldr	r3, [pc, #464]	; (8000f38 <main+0x3f8>)
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e018      	b.n	8000d9c <main+0x25c>
    	 }
     }else{
    	 delayOnTimer=0;
 8000d6a:	4b73      	ldr	r3, [pc, #460]	; (8000f38 <main+0x3f8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
    	 if(lastH1==1){
 8000d70:	4b6b      	ldr	r3, [pc, #428]	; (8000f20 <main+0x3e0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d111      	bne.n	8000d9c <main+0x25c>
    	 HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, LOW);
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	00d9      	lsls	r1, r3, #3
 8000d7c:	2390      	movs	r3, #144	; 0x90
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	2200      	movs	r2, #0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 fae9 	bl	800235a <HAL_GPIO_WritePin>

    	 HAL_GPIO_WritePin(H9_LED_GPIO_Port, H9_LED_Pin, LOW);
 8000d88:	2390      	movs	r3, #144	; 0x90
 8000d8a:	05db      	lsls	r3, r3, #23
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2108      	movs	r1, #8
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 fae2 	bl	800235a <HAL_GPIO_WritePin>

    	 lastH1=0;
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <main+0x3e0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
    	 }
     }

     if(delayOnTimer>=delayOnTimerMax){
 8000d9c:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <main+0x3f8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b1d      	cmp	r3, #29
 8000da2:	dd08      	ble.n	8000db6 <main+0x276>
    	 HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, HIGH);
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	0099      	lsls	r1, r3, #2
 8000da8:	2390      	movs	r3, #144	; 0x90
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	2201      	movs	r2, #1
 8000dae:	0018      	movs	r0, r3
 8000db0:	f001 fad3 	bl	800235a <HAL_GPIO_WritePin>
 8000db4:	e007      	b.n	8000dc6 <main+0x286>
     }else{
    	 HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, LOW);
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	0099      	lsls	r1, r3, #2
 8000dba:	2390      	movs	r3, #144	; 0x90
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f001 faca 	bl	800235a <HAL_GPIO_WritePin>
     }

     if(HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin)==0){//H2觸發
 8000dc6:	2390      	movs	r3, #144	; 0x90
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 faa7 	bl	8002320 <HAL_GPIO_ReadPin>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d115      	bne.n	8000e02 <main+0x2c2>
    	 HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, HIGH);
 8000dd6:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <main+0x3ec>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2102      	movs	r1, #2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 fabc 	bl	800235a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, HIGH);
 8000de2:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <main+0x3ec>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	0018      	movs	r0, r3
 8000dea:	f001 fab6 	bl	800235a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RELAY_5_GPIO_Port, RELAY_5_Pin, HIGH);
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <main+0x3fc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	2102      	movs	r1, #2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 fab0 	bl	800235a <HAL_GPIO_WritePin>
    	 lastH2=1;
 8000dfa:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <main+0x3e4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e018      	b.n	8000e34 <main+0x2f4>
     }else{
    	 if(lastH2==1){
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <main+0x3e4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d114      	bne.n	8000e34 <main+0x2f4>
    	 HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, LOW);
 8000e0a:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <main+0x3ec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2102      	movs	r1, #2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 faa2 	bl	800235a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, LOW);
 8000e16:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <main+0x3ec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 fa9c 	bl	800235a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RELAY_5_GPIO_Port, RELAY_5_Pin, LOW);
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <main+0x3fc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	2102      	movs	r1, #2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fa96 	bl	800235a <HAL_GPIO_WritePin>
    	 lastH2=0;
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <main+0x3e4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
    	 }
     }
     if(HAL_GPIO_ReadPin(H8_Sync_GPIO_Port, H8_Sync_Pin)==0){//H8 Sync 觸發
 8000e34:	2390      	movs	r3, #144	; 0x90
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	2120      	movs	r1, #32
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f001 fa70 	bl	8002320 <HAL_GPIO_ReadPin>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d126      	bne.n	8000e92 <main+0x352>
    	 HAL_GPIO_WritePin(H8_Alarm_LED_GPIO_Port,H8_Alarm_LED_Pin, LOW);
 8000e44:	2390      	movs	r3, #144	; 0x90
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 fa84 	bl	800235a <HAL_GPIO_WritePin>

    	 HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, HIGH);
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <main+0x3ec>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	2101      	movs	r1, #1
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 fa7e 	bl	800235a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, HIGH);
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	00d9      	lsls	r1, r3, #3
 8000e62:	2390      	movs	r3, #144	; 0x90
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2201      	movs	r2, #1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fa76 	bl	800235a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, HIGH);
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	0099      	lsls	r1, r3, #2
 8000e72:	2390      	movs	r3, #144	; 0x90
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	2201      	movs	r2, #1
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 fa6e 	bl	800235a <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RELAY_5_GPIO_Port, RELAY_5_Pin, HIGH);
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <main+0x3fc>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	2102      	movs	r1, #2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fa68 	bl	800235a <HAL_GPIO_WritePin>

    	 lastH8=1;
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <main+0x400>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e029      	b.n	8000ee6 <main+0x3a6>
     }else{
    	 if(lastH2==1){
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <main+0x3e4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d125      	bne.n	8000ee6 <main+0x3a6>
    		 HAL_GPIO_WritePin(H8_Alarm_LED_GPIO_Port,H8_Alarm_LED_Pin, HIGH);
 8000e9a:	2390      	movs	r3, #144	; 0x90
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 fa59 	bl	800235a <HAL_GPIO_WritePin>

        	 HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, LOW);
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <main+0x3ec>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2101      	movs	r1, #1
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f001 fa53 	bl	800235a <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, LOW);
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	00d9      	lsls	r1, r3, #3
 8000eb8:	2390      	movs	r3, #144	; 0x90
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 fa4b 	bl	800235a <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, LOW);
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	0099      	lsls	r1, r3, #2
 8000ec8:	2390      	movs	r3, #144	; 0x90
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 fa43 	bl	800235a <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(RELAY_5_GPIO_Port, RELAY_5_Pin, LOW);
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <main+0x3fc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 fa3d 	bl	800235a <HAL_GPIO_WritePin>
    	 lastH8=0;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <main+0x400>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
    	 }
     }
     //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	 HAL_Delay(100);
 8000ee6:	2064      	movs	r0, #100	; 0x64
 8000ee8:	f000 f978 	bl	80011dc <HAL_Delay>
      for(i = 0,ad1 =0,ad2=0,ad3=0 ;i < 60;)
 8000eec:	e63a      	b.n	8000b64 <main+0x24>
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	200000d8 	.word	0x200000d8
 8000ef4:	20000098 	.word	0x20000098
 8000ef8:	20000334 	.word	0x20000334
 8000efc:	20000330 	.word	0x20000330
 8000f00:	20000338 	.word	0x20000338
 8000f04:	2000033c 	.word	0x2000033c
 8000f08:	28f5c28f 	.word	0x28f5c28f
 8000f0c:	3ffa8f5c 	.word	0x3ffa8f5c
 8000f10:	20000008 	.word	0x20000008
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20000040 	.word	0x20000040
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	20000048 	.word	0x20000048
 8000f24:	2000004c 	.word	0x2000004c
 8000f28:	20000044 	.word	0x20000044
 8000f2c:	48001400 	.word	0x48001400
 8000f30:	20000004 	.word	0x20000004
 8000f34:	20000000 	.word	0x20000000
 8000f38:	2000003c 	.word	0x2000003c
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	20000050 	.word	0x20000050

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b091      	sub	sp, #68	; 0x44
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	2410      	movs	r4, #16
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2330      	movs	r3, #48	; 0x30
 8000f52:	001a      	movs	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	f001 febd 	bl	8002cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	2310      	movs	r3, #16
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f001 feb6 	bl	8002cd4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f68:	0021      	movs	r1, r4
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2212      	movs	r2, #18
 8000f6e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2201      	movs	r2, #1
 8000f74:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2201      	movs	r2, #1
 8000f7a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2210      	movs	r2, #16
 8000f80:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2210      	movs	r2, #16
 8000f86:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 f9ff 	bl	8002394 <HAL_RCC_OscConfig>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000f9a:	f000 f819 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	003b      	movs	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	2100      	movs	r1, #0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 fd04 	bl	80029c8 <HAL_RCC_ClockConfig>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fc4:	f000 f804 	bl	8000fd0 <Error_Handler>
  }
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b011      	add	sp, #68	; 0x44
 8000fce:	bd90      	pop	{r4, r7, pc}

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_MspInit+0x44>)
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_MspInit+0x44>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_MspInit+0x44>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_MspInit+0x44>)
 8000ffc:	69da      	ldr	r2, [r3, #28]
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_MspInit+0x44>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0549      	lsls	r1, r1, #21
 8001004:	430a      	orrs	r2, r1
 8001006:	61da      	str	r2, [r3, #28]
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_MspInit+0x44>)
 800100a:	69da      	ldr	r2, [r3, #28]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	055b      	lsls	r3, r3, #21
 8001010:	4013      	ands	r3, r2
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	40021000 	.word	0x40021000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f8ac 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <WWDG_IRQHandler+0x14>)
 800105a:	0018      	movs	r0, r3
 800105c:	f001 fdf4 	bl	8002c48 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000340 	.word	0x20000340

0800106c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <DMA1_Channel1_IRQHandler+0x14>)
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fefa 	bl	8001e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000054 	.word	0x20000054

08001084 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <ADC1_IRQHandler+0x14>)
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fa8c 	bl	80015a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	20000098 	.word	0x20000098

0800109c <HAL_WWDG_EarlyWakeupCallback>:

/* USER CODE BEGIN 1 */
void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    HAL_WWDG_Refresh(hwwdg);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 fdc0 	bl	8002c2c <HAL_WWDG_Refresh>
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010dc:	4c0b      	ldr	r4, [pc, #44]	; (800110c <LoopForever+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010ea:	f7ff ffe3 	bl	80010b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010ee:	f001 fdcd 	bl	8002c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff fd25 	bl	8000b40 <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   r0, =_estack
 80010f8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001104:	08002d74 	.word	0x08002d74
  ldr r2, =_sbss
 8001108:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800110c:	20000358 	.word	0x20000358

08001110 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <DMA1_Channel2_3_IRQHandler>
	...

08001114 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_Init+0x24>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_Init+0x24>)
 800111e:	2110      	movs	r1, #16
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f809 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112a:	f7ff ff57 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40022000 	.word	0x40022000

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_InitTick+0x5c>)
 8001146:	681c      	ldr	r4, [r3, #0]
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_InitTick+0x60>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	0019      	movs	r1, r3
 800114e:	23fa      	movs	r3, #250	; 0xfa
 8001150:	0098      	lsls	r0, r3, #2
 8001152:	f7fe ffd9 	bl	8000108 <__udivsi3>
 8001156:	0003      	movs	r3, r0
 8001158:	0019      	movs	r1, r3
 800115a:	0020      	movs	r0, r4
 800115c:	f7fe ffd4 	bl	8000108 <__udivsi3>
 8001160:	0003      	movs	r3, r0
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fdc7 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d001      	beq.n	8001170 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e00f      	b.n	8001190 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d80b      	bhi.n	800118e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2301      	movs	r3, #1
 800117a:	425b      	negs	r3, r3
 800117c:	2200      	movs	r2, #0
 800117e:	0018      	movs	r0, r3
 8001180:	f000 fd94 	bl	8001cac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_InitTick+0x64>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b003      	add	sp, #12
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	20000014 	.word	0x20000014
 800119c:	2000001c 	.word	0x2000001c
 80011a0:	20000018 	.word	0x20000018

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	001a      	movs	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	18d2      	adds	r2, r2, r3
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_IncTick+0x20>)
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	2000001c 	.word	0x2000001c
 80011c4:	20000354 	.word	0x20000354

080011c8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000354 	.word	0x20000354

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	001a      	movs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	189b      	adds	r3, r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	f7ff ffe0 	bl	80011c8 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b004      	add	sp, #16
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	2000001c 	.word	0x2000001c

08001224 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	230f      	movs	r3, #15
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e125      	b.n	800148e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10a      	bne.n	8001260 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2234      	movs	r2, #52	; 0x34
 8001254:	2100      	movs	r1, #0
 8001256:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff fb3a 	bl	80008d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001264:	2210      	movs	r2, #16
 8001266:	4013      	ands	r3, r2
 8001268:	d000      	beq.n	800126c <HAL_ADC_Init+0x48>
 800126a:	e103      	b.n	8001474 <HAL_ADC_Init+0x250>
 800126c:	230f      	movs	r3, #15
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d000      	beq.n	8001278 <HAL_ADC_Init+0x54>
 8001276:	e0fd      	b.n	8001474 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2204      	movs	r2, #4
 8001280:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001282:	d000      	beq.n	8001286 <HAL_ADC_Init+0x62>
 8001284:	e0f6      	b.n	8001474 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	4a83      	ldr	r2, [pc, #524]	; (8001498 <HAL_ADC_Init+0x274>)
 800128c:	4013      	ands	r3, r2
 800128e:	2202      	movs	r2, #2
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d112      	bne.n	80012ca <HAL_ADC_Init+0xa6>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2201      	movs	r2, #1
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d009      	beq.n	80012c6 <HAL_ADC_Init+0xa2>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	401a      	ands	r2, r3
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0xa6>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_ADC_Init+0xa8>
 80012ca:	2300      	movs	r3, #0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d116      	bne.n	80012fe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2218      	movs	r2, #24
 80012d8:	4393      	bics	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	0899      	lsrs	r1, r3, #2
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4964      	ldr	r1, [pc, #400]	; (800149c <HAL_ADC_Init+0x278>)
 800130a:	400a      	ands	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7e1b      	ldrb	r3, [r3, #24]
 8001312:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7e5b      	ldrb	r3, [r3, #25]
 8001318:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800131a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7e9b      	ldrb	r3, [r3, #26]
 8001320:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001322:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <HAL_ADC_Init+0x10e>
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	e000      	b.n	8001334 <HAL_ADC_Init+0x110>
 8001332:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001334:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800133a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d101      	bne.n	8001348 <HAL_ADC_Init+0x124>
 8001344:	2304      	movs	r3, #4
 8001346:	e000      	b.n	800134a <HAL_ADC_Init+0x126>
 8001348:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800134a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2124      	movs	r1, #36	; 0x24
 8001350:	5c5b      	ldrb	r3, [r3, r1]
 8001352:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001354:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4313      	orrs	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7edb      	ldrb	r3, [r3, #27]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d115      	bne.n	8001390 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7e9b      	ldrb	r3, [r3, #26]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d105      	bne.n	8001378 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	0252      	lsls	r2, r2, #9
 8001372:	4313      	orrs	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	e00b      	b.n	8001390 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137c:	2220      	movs	r2, #32
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001388:	2201      	movs	r2, #1
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69da      	ldr	r2, [r3, #28]
 8001394:	23c2      	movs	r3, #194	; 0xc2
 8001396:	33ff      	adds	r3, #255	; 0xff
 8001398:	429a      	cmp	r2, r3
 800139a:	d007      	beq.n	80013ac <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013a4:	4313      	orrs	r3, r2
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68d9      	ldr	r1, [r3, #12]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	055b      	lsls	r3, r3, #21
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d01b      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d017      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d013      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d00f      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d00b      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d007      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2b06      	cmp	r3, #6
 80013f6:	d003      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	d112      	bne.n	8001426 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2107      	movs	r1, #7
 800140c:	438a      	bics	r2, r1
 800140e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6959      	ldr	r1, [r3, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	2207      	movs	r2, #7
 800141c:	401a      	ands	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <HAL_ADC_Init+0x27c>)
 800142e:	4013      	ands	r3, r2
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	429a      	cmp	r2, r3
 8001434:	d10b      	bne.n	800144e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	2203      	movs	r2, #3
 8001442:	4393      	bics	r3, r2
 8001444:	2201      	movs	r2, #1
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800144c:	e01c      	b.n	8001488 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	2212      	movs	r2, #18
 8001454:	4393      	bics	r3, r2
 8001456:	2210      	movs	r2, #16
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	2201      	movs	r2, #1
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800146a:	230f      	movs	r3, #15
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001472:	e009      	b.n	8001488 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	2210      	movs	r2, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001480:	230f      	movs	r3, #15
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001488:	230f      	movs	r3, #15
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	781b      	ldrb	r3, [r3, #0]
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	fffffefd 	.word	0xfffffefd
 800149c:	fffe0219 	.word	0xfffe0219
 80014a0:	833fffe7 	.word	0x833fffe7

080014a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2317      	movs	r3, #23
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2204      	movs	r2, #4
 80014c0:	4013      	ands	r3, r2
 80014c2:	d15e      	bne.n	8001582 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2234      	movs	r2, #52	; 0x34
 80014c8:	5c9b      	ldrb	r3, [r3, r2]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Start_DMA+0x2e>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e05e      	b.n	8001590 <HAL_ADC_Start_DMA+0xec>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2234      	movs	r2, #52	; 0x34
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	7e5b      	ldrb	r3, [r3, #25]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d007      	beq.n	80014f2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80014e2:	2317      	movs	r3, #23
 80014e4:	18fc      	adds	r4, r7, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f000 fa2b 	bl	8001944 <ADC_Enable>
 80014ee:	0003      	movs	r3, r0
 80014f0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014f2:	2317      	movs	r3, #23
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d146      	bne.n	800158a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	4a25      	ldr	r2, [pc, #148]	; (8001598 <HAL_ADC_Start_DMA+0xf4>)
 8001502:	4013      	ands	r3, r2
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	0052      	lsls	r2, r2, #1
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2234      	movs	r2, #52	; 0x34
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_ADC_Start_DMA+0xf8>)
 8001522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_ADC_Start_DMA+0xfc>)
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_ADC_Start_DMA+0x100>)
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	221c      	movs	r2, #28
 800153a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2110      	movs	r1, #16
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3340      	adds	r3, #64	; 0x40
 8001566:	0019      	movs	r1, r3
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f000 fc18 	bl	8001da0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2104      	movs	r1, #4
 800157c:	430a      	orrs	r2, r1
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	e003      	b.n	800158a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001582:	2317      	movs	r3, #23
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	2202      	movs	r2, #2
 8001588:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800158a:	2317      	movs	r3, #23
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	781b      	ldrb	r3, [r3, #0]
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b007      	add	sp, #28
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	fffff0fe 	.word	0xfffff0fe
 800159c:	08001a4d 	.word	0x08001a4d
 80015a0:	08001b01 	.word	0x08001b01
 80015a4:	08001b1f 	.word	0x08001b1f

080015a8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d106      	bne.n	80015cc <HAL_ADC_IRQHandler+0x24>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2204      	movs	r2, #4
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d00d      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2208      	movs	r2, #8
 80015d4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d14f      	bne.n	800167a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2208      	movs	r2, #8
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d148      	bne.n	800167a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ec:	2210      	movs	r2, #16
 80015ee:	4013      	ands	r3, r2
 80015f0:	d106      	bne.n	8001600 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4013      	ands	r3, r2
 800160c:	d12d      	bne.n	800166a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001612:	2b00      	cmp	r3, #0
 8001614:	d129      	bne.n	800166a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2208      	movs	r2, #8
 800161e:	4013      	ands	r3, r2
 8001620:	2b08      	cmp	r3, #8
 8001622:	d122      	bne.n	800166a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2204      	movs	r2, #4
 800162c:	4013      	ands	r3, r2
 800162e:	d110      	bne.n	8001652 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	210c      	movs	r1, #12
 800163c:	438a      	bics	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001644:	4a33      	ldr	r2, [pc, #204]	; (8001714 <HAL_ADC_IRQHandler+0x16c>)
 8001646:	4013      	ands	r3, r2
 8001648:	2201      	movs	r2, #1
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
 8001650:	e00b      	b.n	800166a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	2220      	movs	r2, #32
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001662:	2201      	movs	r2, #1
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f853 	bl	8001718 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	4013      	ands	r3, r2
 8001684:	2b80      	cmp	r3, #128	; 0x80
 8001686:	d115      	bne.n	80016b4 <HAL_ADC_IRQHandler+0x10c>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	4013      	ands	r3, r2
 8001692:	2b80      	cmp	r3, #128	; 0x80
 8001694:	d10e      	bne.n	80016b4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	0252      	lsls	r2, r2, #9
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 f846 	bl	8001738 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2210      	movs	r2, #16
 80016bc:	4013      	ands	r3, r2
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d123      	bne.n	800170a <HAL_ADC_IRQHandler+0x162>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2210      	movs	r2, #16
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b10      	cmp	r3, #16
 80016ce:	d11c      	bne.n	800170a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d006      	beq.n	80016e6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2201      	movs	r2, #1
 80016e0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10d      	bne.n	8001702 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ea:	2202      	movs	r2, #2
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2210      	movs	r2, #16
 80016f8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f823 	bl	8001748 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2210      	movs	r2, #16
 8001708:	601a      	str	r2, [r3, #0]
  }

}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	fffffefe 	.word	0xfffffefe

08001718 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001762:	230f      	movs	r3, #15
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	055b      	lsls	r3, r3, #21
 8001776:	429a      	cmp	r2, r3
 8001778:	d011      	beq.n	800179e <HAL_ADC_ConfigChannel+0x46>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	2b01      	cmp	r3, #1
 8001780:	d00d      	beq.n	800179e <HAL_ADC_ConfigChannel+0x46>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	2b02      	cmp	r3, #2
 8001788:	d009      	beq.n	800179e <HAL_ADC_ConfigChannel+0x46>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	2b03      	cmp	r3, #3
 8001790:	d005      	beq.n	800179e <HAL_ADC_ConfigChannel+0x46>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	2b04      	cmp	r3, #4
 8001798:	d001      	beq.n	800179e <HAL_ADC_ConfigChannel+0x46>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2234      	movs	r2, #52	; 0x34
 80017a2:	5c9b      	ldrb	r3, [r3, r2]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x54>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e0bb      	b.n	8001924 <HAL_ADC_ConfigChannel+0x1cc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2234      	movs	r2, #52	; 0x34
 80017b0:	2101      	movs	r1, #1
 80017b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2204      	movs	r2, #4
 80017bc:	4013      	ands	r3, r2
 80017be:	d000      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x6a>
 80017c0:	e09f      	b.n	8001902 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a59      	ldr	r2, [pc, #356]	; (800192c <HAL_ADC_ConfigChannel+0x1d4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d100      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x76>
 80017cc:	e077      	b.n	80018be <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	409a      	lsls	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	055b      	lsls	r3, r3, #21
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d037      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d033      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d02f      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	2b03      	cmp	r3, #3
 8001806:	d02b      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	2b04      	cmp	r3, #4
 800180e:	d027      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	2b05      	cmp	r3, #5
 8001816:	d023      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	2b06      	cmp	r3, #6
 800181e:	d01f      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	2b07      	cmp	r3, #7
 8001826:	d01b      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2107      	movs	r1, #7
 8001834:	400b      	ands	r3, r1
 8001836:	429a      	cmp	r2, r3
 8001838:	d012      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2107      	movs	r1, #7
 8001846:	438a      	bics	r2, r1
 8001848:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6959      	ldr	r1, [r3, #20]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2207      	movs	r2, #7
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b10      	cmp	r3, #16
 8001866:	d003      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x118>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b11      	cmp	r3, #17
 800186e:	d152      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_ADC_ConfigChannel+0x1d8>)
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b10      	cmp	r3, #16
 800187a:	d102      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x12a>
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	e001      	b.n	8001886 <HAL_ADC_ConfigChannel+0x12e>
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	03db      	lsls	r3, r3, #15
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_ADC_ConfigChannel+0x1d8>)
 8001888:	430b      	orrs	r3, r1
 800188a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b10      	cmp	r3, #16
 8001892:	d140      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_ADC_ConfigChannel+0x1dc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4927      	ldr	r1, [pc, #156]	; (8001938 <HAL_ADC_ConfigChannel+0x1e0>)
 800189a:	0018      	movs	r0, r3
 800189c:	f7fe fc34 	bl	8000108 <__udivsi3>
 80018a0:	0003      	movs	r3, r0
 80018a2:	001a      	movs	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	189b      	adds	r3, r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ae:	e002      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x158>
 80018bc:	e02b      	b.n	8001916 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	4099      	lsls	r1, r3
 80018cc:	000b      	movs	r3, r1
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	400a      	ands	r2, r1
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d003      	beq.n	80018e8 <HAL_ADC_ConfigChannel+0x190>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b11      	cmp	r3, #17
 80018e6:	d116      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_ADC_ConfigChannel+0x1d8>)
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1a0>
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_ADC_ConfigChannel+0x1e4>)
 80018f6:	e000      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1a2>
 80018f8:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_ADC_ConfigChannel+0x1e8>)
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_ADC_ConfigChannel+0x1d8>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e009      	b.n	8001916 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	2220      	movs	r2, #32
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800190e:	230f      	movs	r3, #15
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2234      	movs	r2, #52	; 0x34
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800191e:	230f      	movs	r3, #15
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b004      	add	sp, #16
 800192a:	bd80      	pop	{r7, pc}
 800192c:	00001001 	.word	0x00001001
 8001930:	40012708 	.word	0x40012708
 8001934:	20000014 	.word	0x20000014
 8001938:	000f4240 	.word	0x000f4240
 800193c:	ff7fffff 	.word	0xff7fffff
 8001940:	ffbfffff 	.word	0xffbfffff

08001944 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	2b01      	cmp	r3, #1
 8001960:	d112      	bne.n	8001988 <ADC_Enable+0x44>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	2b01      	cmp	r3, #1
 800196e:	d009      	beq.n	8001984 <ADC_Enable+0x40>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	401a      	ands	r2, r3
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	429a      	cmp	r2, r3
 8001982:	d101      	bne.n	8001988 <ADC_Enable+0x44>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <ADC_Enable+0x46>
 8001988:	2300      	movs	r3, #0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d152      	bne.n	8001a34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <ADC_Enable+0xfc>)
 8001996:	4013      	ands	r3, r2
 8001998:	d00d      	beq.n	80019b6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	2210      	movs	r2, #16
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019aa:	2201      	movs	r2, #1
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e03f      	b.n	8001a36 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <ADC_Enable+0x100>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	491f      	ldr	r1, [pc, #124]	; (8001a48 <ADC_Enable+0x104>)
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7fe fb9b 	bl	8000108 <__udivsi3>
 80019d2:	0003      	movs	r3, r0
 80019d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019d6:	e002      	b.n	80019de <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3b01      	subs	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f9      	bne.n	80019d8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fbf0 	bl	80011c8 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ec:	e01b      	b.n	8001a26 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ee:	f7ff fbeb 	bl	80011c8 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d914      	bls.n	8001a26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d00d      	beq.n	8001a26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	2210      	movs	r2, #16
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e007      	b.n	8001a36 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d1dc      	bne.n	80019ee <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	80000017 	.word	0x80000017
 8001a44:	20000014 	.word	0x20000014
 8001a48:	000f4240 	.word	0x000f4240

08001a4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	2250      	movs	r2, #80	; 0x50
 8001a60:	4013      	ands	r3, r2
 8001a62:	d140      	bne.n	8001ae6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d12d      	bne.n	8001adc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d129      	bne.n	8001adc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d122      	bne.n	8001adc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d110      	bne.n	8001ac4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	210c      	movs	r1, #12
 8001aae:	438a      	bics	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <ADC_DMAConvCplt+0xb0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2201      	movs	r2, #1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac2:	e00b      	b.n	8001adc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac8:	2220      	movs	r2, #32
 8001aca:	431a      	orrs	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff fe1a 	bl	8001718 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001ae4:	e005      	b.n	8001af2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	0010      	movs	r0, r2
 8001af0:	4798      	blx	r3
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	fffffefe 	.word	0xfffffefe

08001b00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff fe09 	bl	8001728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b004      	add	sp, #16
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	431a      	orrs	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff fdfe 	bl	8001748 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b004      	add	sp, #16
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b7f      	cmp	r3, #127	; 0x7f
 8001b66:	d809      	bhi.n	8001b7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	231f      	movs	r3, #31
 8001b70:	401a      	ands	r2, r3
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_EnableIRQ+0x30>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	4091      	lsls	r1, r2
 8001b78:	000a      	movs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
  }
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	0002      	movs	r2, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	d828      	bhi.n	8001bf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <__NVIC_SetPriority+0xd4>)
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	33c0      	adds	r3, #192	; 0xc0
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	589b      	ldr	r3, [r3, r2]
 8001bae:	1dfa      	adds	r2, r7, #7
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	00d2      	lsls	r2, r2, #3
 8001bba:	21ff      	movs	r1, #255	; 0xff
 8001bbc:	4091      	lsls	r1, r2
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	43d2      	mvns	r2, r2
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	22ff      	movs	r2, #255	; 0xff
 8001bcc:	401a      	ands	r2, r3
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	4003      	ands	r3, r0
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bdc:	481f      	ldr	r0, [pc, #124]	; (8001c5c <__NVIC_SetPriority+0xd4>)
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	430a      	orrs	r2, r1
 8001be8:	33c0      	adds	r3, #192	; 0xc0
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bee:	e031      	b.n	8001c54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <__NVIC_SetPriority+0xd8>)
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	3b08      	subs	r3, #8
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3306      	adds	r3, #6
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	18d3      	adds	r3, r2, r3
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1dfa      	adds	r2, r7, #7
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	0011      	movs	r1, r2
 8001c10:	2203      	movs	r2, #3
 8001c12:	400a      	ands	r2, r1
 8001c14:	00d2      	lsls	r2, r2, #3
 8001c16:	21ff      	movs	r1, #255	; 0xff
 8001c18:	4091      	lsls	r1, r2
 8001c1a:	000a      	movs	r2, r1
 8001c1c:	43d2      	mvns	r2, r2
 8001c1e:	401a      	ands	r2, r3
 8001c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	22ff      	movs	r2, #255	; 0xff
 8001c28:	401a      	ands	r2, r3
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2303      	movs	r3, #3
 8001c32:	4003      	ands	r3, r0
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c38:	4809      	ldr	r0, [pc, #36]	; (8001c60 <__NVIC_SetPriority+0xd8>)
 8001c3a:	1dfb      	adds	r3, r7, #7
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	001c      	movs	r4, r3
 8001c40:	230f      	movs	r3, #15
 8001c42:	4023      	ands	r3, r4
 8001c44:	3b08      	subs	r3, #8
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	3306      	adds	r3, #6
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	18c3      	adds	r3, r0, r3
 8001c50:	3304      	adds	r3, #4
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b003      	add	sp, #12
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1e5a      	subs	r2, r3, #1
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	045b      	lsls	r3, r3, #17
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d301      	bcc.n	8001c7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e010      	b.n	8001c9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <SysTick_Config+0x44>)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	3a01      	subs	r2, #1
 8001c82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c84:	2301      	movs	r3, #1
 8001c86:	425b      	negs	r3, r3
 8001c88:	2103      	movs	r1, #3
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7ff ff7c 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_Config+0x44>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <SysTick_Config+0x44>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	1c02      	adds	r2, r0, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	0002      	movs	r2, r0
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ff33 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff ffaf 	bl	8001c64 <SysTick_Config>
 8001d06:	0003      	movs	r3, r0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e036      	b.n	8001d94 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2221      	movs	r2, #33	; 0x21
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_DMA_Init+0x8c>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 f946 	bl	8002008 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2221      	movs	r2, #33	; 0x21
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	2100      	movs	r1, #0
 8001d90:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}  
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	ffffc00f 	.word	0xffffc00f

08001da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2317      	movs	r3, #23
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DMA_Start_IT+0x24>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e04f      	b.n	8001e64 <HAL_DMA_Start_IT+0xc4>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2221      	movs	r2, #33	; 0x21
 8001dd0:	5c9b      	ldrb	r3, [r3, r2]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d13a      	bne.n	8001e4e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2221      	movs	r2, #33	; 0x21
 8001ddc:	2102      	movs	r1, #2
 8001dde:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	438a      	bics	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f8d7 	bl	8001fb0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	210e      	movs	r1, #14
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e00f      	b.n	8001e3c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	210a      	movs	r1, #10
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2104      	movs	r1, #4
 8001e38:	438a      	bics	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2101      	movs	r1, #1
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e007      	b.n	8001e5e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001e56:	2317      	movs	r3, #23
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001e5e:	2317      	movs	r3, #23
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	781b      	ldrb	r3, [r3, #0]
} 
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b006      	add	sp, #24
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	2204      	movs	r2, #4
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	d024      	beq.n	8001ede <HAL_DMA_IRQHandler+0x72>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2204      	movs	r2, #4
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d020      	beq.n	8001ede <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	4091      	lsls	r1, r2
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d100      	bne.n	8001ed2 <HAL_DMA_IRQHandler+0x66>
 8001ed0:	e06a      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	0010      	movs	r0, r2
 8001eda:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001edc:	e064      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xda>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d027      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2220      	movs	r2, #32
 8001efe:	4013      	ands	r3, r2
 8001f00:	d10b      	bne.n	8001f1a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	210a      	movs	r1, #10
 8001f0e:	438a      	bics	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2221      	movs	r2, #33	; 0x21
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2102      	movs	r1, #2
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d036      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	0010      	movs	r0, r2
 8001f42:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f44:	e030      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	0013      	movs	r3, r2
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	d028      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d024      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	210e      	movs	r1, #14
 8001f6a:	438a      	bics	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2101      	movs	r1, #1
 8001f78:	4091      	lsls	r1, r2
 8001f7a:	000a      	movs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2221      	movs	r2, #33	; 0x21
 8001f88:	2101      	movs	r1, #1
 8001f8a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	0010      	movs	r0, r2
 8001fa4:	4798      	blx	r3
    }
   }
}  
 8001fa6:	e7ff      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x13c>
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d108      	bne.n	8001ff0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fee:	e007      	b.n	8002000 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b004      	add	sp, #16
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a08      	ldr	r2, [pc, #32]	; (8002038 <DMA_CalcBaseAndBitshift+0x30>)
 8002016:	4694      	mov	ip, r2
 8002018:	4463      	add	r3, ip
 800201a:	2114      	movs	r1, #20
 800201c:	0018      	movs	r0, r3
 800201e:	f7fe f873 	bl	8000108 <__udivsi3>
 8002022:	0003      	movs	r3, r0
 8002024:	009a      	lsls	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <DMA_CalcBaseAndBitshift+0x34>)
 800202e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}
 8002038:	bffdfff8 	.word	0xbffdfff8
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e14f      	b.n	80022f0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <HAL_GPIO_Init+0x28>
 8002066:	e140      	b.n	80022ea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	4013      	ands	r3, r2
 8002070:	2b01      	cmp	r3, #1
 8002072:	d005      	beq.n	8002080 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800207c:	2b02      	cmp	r3, #2
 800207e:	d130      	bne.n	80020e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	409a      	lsls	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	43da      	mvns	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	0013      	movs	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	43da      	mvns	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	2201      	movs	r2, #1
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2203      	movs	r2, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d017      	beq.n	800211e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	409a      	lsls	r2, r3
 80020fc:	0013      	movs	r3, r2
 80020fe:	43da      	mvns	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	0013      	movs	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2203      	movs	r2, #3
 8002124:	4013      	ands	r3, r2
 8002126:	2b02      	cmp	r3, #2
 8002128:	d123      	bne.n	8002172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	58d3      	ldr	r3, [r2, r3]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2207      	movs	r2, #7
 800213c:	4013      	ands	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	43da      	mvns	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2107      	movs	r1, #7
 8002156:	400b      	ands	r3, r1
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	409a      	lsls	r2, r3
 8002180:	0013      	movs	r3, r2
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2203      	movs	r2, #3
 8002190:	401a      	ands	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	d100      	bne.n	80021b4 <HAL_GPIO_Init+0x174>
 80021b2:	e09a      	b.n	80022ea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b4:	4b54      	ldr	r3, [pc, #336]	; (8002308 <HAL_GPIO_Init+0x2c8>)
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_GPIO_Init+0x2c8>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	430a      	orrs	r2, r1
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x2c8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021cc:	4a4f      	ldr	r2, [pc, #316]	; (800230c <HAL_GPIO_Init+0x2cc>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	589b      	ldr	r3, [r3, r2]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2203      	movs	r2, #3
 80021de:	4013      	ands	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	409a      	lsls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	43da      	mvns	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	2390      	movs	r3, #144	; 0x90
 80021f4:	05db      	lsls	r3, r3, #23
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x1e2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a44      	ldr	r2, [pc, #272]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x1de>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a43      	ldr	r2, [pc, #268]	; (8002314 <HAL_GPIO_Init+0x2d4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x1da>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a42      	ldr	r2, [pc, #264]	; (8002318 <HAL_GPIO_Init+0x2d8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x1d6>
 8002212:	2303      	movs	r3, #3
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x1e4>
 8002216:	2305      	movs	r3, #5
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x1e4>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x1e4>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x1e4>
 8002222:	2300      	movs	r3, #0
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	2103      	movs	r1, #3
 8002228:	400a      	ands	r2, r1
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002234:	4935      	ldr	r1, [pc, #212]	; (800230c <HAL_GPIO_Init+0x2cc>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_GPIO_Init+0x2dc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43da      	mvns	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	4013      	ands	r3, r2
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_GPIO_Init+0x2dc>)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_GPIO_Init+0x2dc>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43da      	mvns	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_GPIO_Init+0x2dc>)
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_GPIO_Init+0x2dc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43da      	mvns	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	035b      	lsls	r3, r3, #13
 80022ae:	4013      	ands	r3, r2
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_GPIO_Init+0x2dc>)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_GPIO_Init+0x2dc>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	039b      	lsls	r3, r3, #14
 80022d8:	4013      	ands	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_GPIO_Init+0x2dc>)
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	40da      	lsrs	r2, r3
 80022f8:	1e13      	subs	r3, r2, #0
 80022fa:	d000      	beq.n	80022fe <HAL_GPIO_Init+0x2be>
 80022fc:	e6a8      	b.n	8002050 <HAL_GPIO_Init+0x10>
  } 
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b006      	add	sp, #24
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	48000400 	.word	0x48000400
 8002314:	48000800 	.word	0x48000800
 8002318:	48000c00 	.word	0x48000c00
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	000a      	movs	r2, r1
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	1cba      	adds	r2, r7, #2
 8002334:	8812      	ldrh	r2, [r2, #0]
 8002336:	4013      	ands	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800233a:	230f      	movs	r3, #15
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e003      	b.n	800234c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002344:	230f      	movs	r3, #15
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800234c:	230f      	movs	r3, #15
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	781b      	ldrb	r3, [r3, #0]
  }
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	0008      	movs	r0, r1
 8002364:	0011      	movs	r1, r2
 8002366:	1cbb      	adds	r3, r7, #2
 8002368:	1c02      	adds	r2, r0, #0
 800236a:	801a      	strh	r2, [r3, #0]
 800236c:	1c7b      	adds	r3, r7, #1
 800236e:	1c0a      	adds	r2, r1, #0
 8002370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002372:	1c7b      	adds	r3, r7, #1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237a:	1cbb      	adds	r3, r7, #2
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002382:	e003      	b.n	800238c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002384:	1cbb      	adds	r3, r7, #2
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e301      	b.n	80029aa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	d100      	bne.n	80023b2 <HAL_RCC_OscConfig+0x1e>
 80023b0:	e08d      	b.n	80024ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023b2:	4bc3      	ldr	r3, [pc, #780]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	220c      	movs	r2, #12
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d00e      	beq.n	80023dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023be:	4bc0      	ldr	r3, [pc, #768]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	220c      	movs	r2, #12
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x64>
 80023ca:	4bbd      	ldr	r3, [pc, #756]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	401a      	ands	r2, r3
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	429a      	cmp	r2, r3
 80023da:	d10d      	bne.n	80023f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	4bb8      	ldr	r3, [pc, #736]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	4013      	ands	r3, r2
 80023e6:	d100      	bne.n	80023ea <HAL_RCC_OscConfig+0x56>
 80023e8:	e070      	b.n	80024cc <HAL_RCC_OscConfig+0x138>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d000      	beq.n	80023f4 <HAL_RCC_OscConfig+0x60>
 80023f2:	e06b      	b.n	80024cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e2d8      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_OscConfig+0x7c>
 8002400:	4baf      	ldr	r3, [pc, #700]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4bae      	ldr	r3, [pc, #696]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0249      	lsls	r1, r1, #9
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e02f      	b.n	8002470 <HAL_RCC_OscConfig+0xdc>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x9e>
 8002418:	4ba9      	ldr	r3, [pc, #676]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4ba8      	ldr	r3, [pc, #672]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800241e:	49a9      	ldr	r1, [pc, #676]	; (80026c4 <HAL_RCC_OscConfig+0x330>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	4ba6      	ldr	r3, [pc, #664]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4ba5      	ldr	r3, [pc, #660]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800242a:	49a7      	ldr	r1, [pc, #668]	; (80026c8 <HAL_RCC_OscConfig+0x334>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e01e      	b.n	8002470 <HAL_RCC_OscConfig+0xdc>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d10e      	bne.n	8002458 <HAL_RCC_OscConfig+0xc4>
 800243a:	4ba1      	ldr	r3, [pc, #644]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	02c9      	lsls	r1, r1, #11
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	4b9d      	ldr	r3, [pc, #628]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b9c      	ldr	r3, [pc, #624]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0249      	lsls	r1, r1, #9
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xdc>
 8002458:	4b99      	ldr	r3, [pc, #612]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b98      	ldr	r3, [pc, #608]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800245e:	4999      	ldr	r1, [pc, #612]	; (80026c4 <HAL_RCC_OscConfig+0x330>)
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	4b96      	ldr	r3, [pc, #600]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b95      	ldr	r3, [pc, #596]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800246a:	4997      	ldr	r1, [pc, #604]	; (80026c8 <HAL_RCC_OscConfig+0x334>)
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d014      	beq.n	80024a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fea6 	bl	80011c8 <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002482:	f7fe fea1 	bl	80011c8 <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e28a      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002494:	4b8a      	ldr	r3, [pc, #552]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	029b      	lsls	r3, r3, #10
 800249c:	4013      	ands	r3, r2
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0xee>
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe91 	bl	80011c8 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fe8c 	bl	80011c8 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e275      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b80      	ldr	r3, [pc, #512]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	029b      	lsls	r3, r3, #10
 80024c6:	4013      	ands	r3, r2
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x118>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d100      	bne.n	80024da <HAL_RCC_OscConfig+0x146>
 80024d8:	e069      	b.n	80025ae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024da:	4b79      	ldr	r3, [pc, #484]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	220c      	movs	r2, #12
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00b      	beq.n	80024fc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e4:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	220c      	movs	r2, #12
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d11c      	bne.n	800252a <HAL_RCC_OscConfig+0x196>
 80024f0:	4b73      	ldr	r3, [pc, #460]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	4013      	ands	r3, r2
 80024fa:	d116      	bne.n	800252a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fc:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2202      	movs	r2, #2
 8002502:	4013      	ands	r3, r2
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x17e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e24b      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b6b      	ldr	r3, [pc, #428]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	22f8      	movs	r2, #248	; 0xf8
 8002518:	4393      	bics	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00da      	lsls	r2, r3, #3
 8002522:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002528:	e041      	b.n	80025ae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d024      	beq.n	800257c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002538:	2101      	movs	r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe fe43 	bl	80011c8 <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fe3e 	bl	80011c8 <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e227      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d0f1      	beq.n	8002548 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	22f8      	movs	r2, #248	; 0xf8
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00da      	lsls	r2, r3, #3
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e018      	b.n	80025ae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b4f      	ldr	r3, [pc, #316]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fe1e 	bl	80011c8 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fe19 	bl	80011c8 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e202      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d1f1      	bne.n	8002592 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2208      	movs	r2, #8
 80025b4:	4013      	ands	r3, r2
 80025b6:	d036      	beq.n	8002626 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d019      	beq.n	80025f4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c0:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c4:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	2101      	movs	r1, #1
 80025c8:	430a      	orrs	r2, r1
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7fe fdfc 	bl	80011c8 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d6:	f7fe fdf7 	bl	80011c8 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1e0      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2202      	movs	r2, #2
 80025ee:	4013      	ands	r3, r2
 80025f0:	d0f1      	beq.n	80025d6 <HAL_RCC_OscConfig+0x242>
 80025f2:	e018      	b.n	8002626 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	438a      	bics	r2, r1
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7fe fde2 	bl	80011c8 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260a:	f7fe fddd 	bl	80011c8 <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1c6      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d1f1      	bne.n	800260a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2204      	movs	r2, #4
 800262c:	4013      	ands	r3, r2
 800262e:	d100      	bne.n	8002632 <HAL_RCC_OscConfig+0x29e>
 8002630:	e0b4      	b.n	800279c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002632:	201f      	movs	r0, #31
 8002634:	183b      	adds	r3, r7, r0
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	055b      	lsls	r3, r3, #21
 8002642:	4013      	ands	r3, r2
 8002644:	d110      	bne.n	8002668 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0549      	lsls	r1, r1, #21
 8002650:	430a      	orrs	r2, r1
 8002652:	61da      	str	r2, [r3, #28]
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	055b      	lsls	r3, r3, #21
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002662:	183b      	adds	r3, r7, r0
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4013      	ands	r3, r2
 8002672:	d11a      	bne.n	80026aa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	0049      	lsls	r1, r1, #1
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7fe fda1 	bl	80011c8 <HAL_GetTick>
 8002686:	0003      	movs	r3, r0
 8002688:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe fd9c 	bl	80011c8 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e185      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10e      	bne.n	80026d0 <HAL_RCC_OscConfig+0x33c>
 80026b2:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <HAL_RCC_OscConfig+0x32c>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	430a      	orrs	r2, r1
 80026bc:	621a      	str	r2, [r3, #32]
 80026be:	e035      	b.n	800272c <HAL_RCC_OscConfig+0x398>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	fffeffff 	.word	0xfffeffff
 80026c8:	fffbffff 	.word	0xfffbffff
 80026cc:	40007000 	.word	0x40007000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x35e>
 80026d8:	4bb6      	ldr	r3, [pc, #728]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	4bb5      	ldr	r3, [pc, #724]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80026de:	2101      	movs	r1, #1
 80026e0:	438a      	bics	r2, r1
 80026e2:	621a      	str	r2, [r3, #32]
 80026e4:	4bb3      	ldr	r3, [pc, #716]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	4bb2      	ldr	r3, [pc, #712]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80026ea:	2104      	movs	r1, #4
 80026ec:	438a      	bics	r2, r1
 80026ee:	621a      	str	r2, [r3, #32]
 80026f0:	e01c      	b.n	800272c <HAL_RCC_OscConfig+0x398>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x380>
 80026fa:	4bae      	ldr	r3, [pc, #696]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	4bad      	ldr	r3, [pc, #692]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002700:	2104      	movs	r1, #4
 8002702:	430a      	orrs	r2, r1
 8002704:	621a      	str	r2, [r3, #32]
 8002706:	4bab      	ldr	r3, [pc, #684]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	4baa      	ldr	r3, [pc, #680]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	621a      	str	r2, [r3, #32]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0x398>
 8002714:	4ba7      	ldr	r3, [pc, #668]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002716:	6a1a      	ldr	r2, [r3, #32]
 8002718:	4ba6      	ldr	r3, [pc, #664]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800271a:	2101      	movs	r1, #1
 800271c:	438a      	bics	r2, r1
 800271e:	621a      	str	r2, [r3, #32]
 8002720:	4ba4      	ldr	r3, [pc, #656]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	4ba3      	ldr	r3, [pc, #652]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002726:	2104      	movs	r1, #4
 8002728:	438a      	bics	r2, r1
 800272a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d014      	beq.n	800275e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7fe fd48 	bl	80011c8 <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	e009      	b.n	8002752 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fd43 	bl	80011c8 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	4a9b      	ldr	r2, [pc, #620]	; (80029b8 <HAL_RCC_OscConfig+0x624>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e12b      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	4b98      	ldr	r3, [pc, #608]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x3aa>
 800275c:	e013      	b.n	8002786 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fd33 	bl	80011c8 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	e009      	b.n	800277c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fd2e 	bl	80011c8 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	4a91      	ldr	r2, [pc, #580]	; (80029b8 <HAL_RCC_OscConfig+0x624>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e116      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	2202      	movs	r2, #2
 8002782:	4013      	ands	r3, r2
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002786:	231f      	movs	r3, #31
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002790:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	4b87      	ldr	r3, [pc, #540]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002796:	4989      	ldr	r1, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 8002798:	400a      	ands	r2, r1
 800279a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	4013      	ands	r3, r2
 80027a4:	d063      	beq.n	800286e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d12a      	bne.n	8002804 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80027b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b2:	4b80      	ldr	r3, [pc, #512]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80027b4:	2104      	movs	r1, #4
 80027b6:	430a      	orrs	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027ba:	4b7e      	ldr	r3, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fcff 	bl	80011c8 <HAL_GetTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027d0:	f7fe fcfa 	bl	80011c8 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0e3      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027e2:	4b74      	ldr	r3, [pc, #464]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	2202      	movs	r2, #2
 80027e8:	4013      	ands	r3, r2
 80027ea:	d0f1      	beq.n	80027d0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027ec:	4b71      	ldr	r3, [pc, #452]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	22f8      	movs	r2, #248	; 0xf8
 80027f2:	4393      	bics	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	4b6d      	ldr	r3, [pc, #436]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
 8002802:	e034      	b.n	800286e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	3305      	adds	r3, #5
 800280a:	d111      	bne.n	8002830 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800280c:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800280e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002812:	2104      	movs	r1, #4
 8002814:	438a      	bics	r2, r1
 8002816:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002818:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	22f8      	movs	r2, #248	; 0xf8
 800281e:	4393      	bics	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	00da      	lsls	r2, r3, #3
 8002828:	4b62      	ldr	r3, [pc, #392]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800282a:	430a      	orrs	r2, r1
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
 800282e:	e01e      	b.n	800286e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002830:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002834:	4b5f      	ldr	r3, [pc, #380]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002836:	2104      	movs	r1, #4
 8002838:	430a      	orrs	r2, r1
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800283c:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800283e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002840:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7fe fcbe 	bl	80011c8 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002852:	f7fe fcb9 	bl	80011c8 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0a2      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	2202      	movs	r2, #2
 800286a:	4013      	ands	r3, r2
 800286c:	d1f1      	bne.n	8002852 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d100      	bne.n	8002878 <HAL_RCC_OscConfig+0x4e4>
 8002876:	e097      	b.n	80029a8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	220c      	movs	r2, #12
 800287e:	4013      	ands	r3, r2
 8002880:	2b08      	cmp	r3, #8
 8002882:	d100      	bne.n	8002886 <HAL_RCC_OscConfig+0x4f2>
 8002884:	e06b      	b.n	800295e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d14c      	bne.n	8002928 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002894:	494a      	ldr	r1, [pc, #296]	; (80029c0 <HAL_RCC_OscConfig+0x62c>)
 8002896:	400a      	ands	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe fc95 	bl	80011c8 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fc90 	bl	80011c8 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e079      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b6:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	049b      	lsls	r3, r3, #18
 80028be:	4013      	ands	r3, r2
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c2:	4b3c      	ldr	r3, [pc, #240]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	220f      	movs	r2, #15
 80028c8:	4393      	bics	r3, r2
 80028ca:	0019      	movs	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80028d2:	430a      	orrs	r2, r1
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a3a      	ldr	r2, [pc, #232]	; (80029c4 <HAL_RCC_OscConfig+0x630>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	431a      	orrs	r2, r3
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f0:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	0449      	lsls	r1, r1, #17
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fc63 	bl	80011c8 <HAL_GetTick>
 8002902:	0003      	movs	r3, r0
 8002904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fc5e 	bl	80011c8 <HAL_GetTick>
 800290c:	0002      	movs	r2, r0
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e047      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	049b      	lsls	r3, r3, #18
 8002922:	4013      	ands	r3, r2
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x574>
 8002926:	e03f      	b.n	80029a8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800292e:	4924      	ldr	r1, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x62c>)
 8002930:	400a      	ands	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fc48 	bl	80011c8 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe fc43 	bl	80011c8 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e02c      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	049b      	lsls	r3, r3, #18
 8002958:	4013      	ands	r3, r2
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x5aa>
 800295c:	e024      	b.n	80029a8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e01f      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCC_OscConfig+0x620>)
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	401a      	ands	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	429a      	cmp	r2, r3
 8002984:	d10e      	bne.n	80029a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	220f      	movs	r2, #15
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	23f0      	movs	r3, #240	; 0xf0
 8002998:	039b      	lsls	r3, r3, #14
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b008      	add	sp, #32
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	40021000 	.word	0x40021000
 80029b8:	00001388 	.word	0x00001388
 80029bc:	efffffff 	.word	0xefffffff
 80029c0:	feffffff 	.word	0xfeffffff
 80029c4:	ffc2ffff 	.word	0xffc2ffff

080029c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0b3      	b.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d911      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b58      	ldr	r3, [pc, #352]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4393      	bics	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fc:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e09a      	b.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d015      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d006      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a22:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a28:	21e0      	movs	r1, #224	; 0xe0
 8002a2a:	00c9      	lsls	r1, r1, #3
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	22f0      	movs	r2, #240	; 0xf0
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d040      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d114      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06e      	b.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	049b      	lsls	r3, r3, #18
 8002a76:	4013      	ands	r3, r2
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e062      	b.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e05b      	b.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	4393      	bics	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fb92 	bl	80011c8 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa8:	e009      	b.n	8002abe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aaa:	f7fe fb8d 	bl	80011c8 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <HAL_RCC_ClockConfig+0x18c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e042      	b.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1ec      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d211      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_RCC_ClockConfig+0x184>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e020      	b.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2204      	movs	r2, #4
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_RCC_ClockConfig+0x190>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b20:	f000 f820 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b24:	0001      	movs	r1, r0
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x188>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	4013      	ands	r3, r2
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_RCC_ClockConfig+0x194>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	000a      	movs	r2, r1
 8002b36:	40da      	lsrs	r2, r3
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x198>)
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f7fe fafd 	bl	800113c <HAL_InitTick>
  
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	00001388 	.word	0x00001388
 8002b58:	fffff8ff 	.word	0xfffff8ff
 8002b5c:	08002d5c 	.word	0x08002d5c
 8002b60:	20000014 	.word	0x20000014

08002b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b08f      	sub	sp, #60	; 0x3c
 8002b68:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002b6a:	2314      	movs	r3, #20
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	4a2b      	ldr	r2, [pc, #172]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b72:	c313      	stmia	r3!, {r0, r1, r4}
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	4a29      	ldr	r2, [pc, #164]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b7e:	c313      	stmia	r3!, {r0, r1, r4}
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	220c      	movs	r2, #12
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d002      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x4a>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x50>
 8002bac:	e02d      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bb2:	e02d      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	0c9b      	lsrs	r3, r3, #18
 8002bb8:	220f      	movs	r2, #15
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2214      	movs	r2, #20
 8002bbe:	18ba      	adds	r2, r7, r2
 8002bc0:	5cd3      	ldrb	r3, [r2, r3]
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	220f      	movs	r2, #15
 8002bca:	4013      	ands	r3, r2
 8002bcc:	1d3a      	adds	r2, r7, #4
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bde:	4812      	ldr	r0, [pc, #72]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002be0:	f7fd fa92 	bl	8000108 <__udivsi3>
 8002be4:	0003      	movs	r3, r0
 8002be6:	001a      	movs	r2, r3
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	4353      	muls	r3, r2
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
 8002bee:	e009      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf2:	000a      	movs	r2, r1
 8002bf4:	0152      	lsls	r2, r2, #5
 8002bf6:	1a52      	subs	r2, r2, r1
 8002bf8:	0193      	lsls	r3, r2, #6
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	185b      	adds	r3, r3, r1
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c08:	e002      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c0e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b00f      	add	sp, #60	; 0x3c
 8002c18:	bd90      	pop	{r4, r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	08002cfc 	.word	0x08002cfc
 8002c20:	08002d0c 	.word	0x08002d0c
 8002c24:	40021000 	.word	0x40021000
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d10f      	bne.n	8002c84 <HAL_WWDG_IRQHandler+0x3c>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_WWDG_IRQHandler+0x3c>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4252      	negs	r2, r2
 8002c7a:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7fe fa0c 	bl	800109c <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <__libc_init_array>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	2600      	movs	r6, #0
 8002c90:	4d0c      	ldr	r5, [pc, #48]	; (8002cc4 <__libc_init_array+0x38>)
 8002c92:	4c0d      	ldr	r4, [pc, #52]	; (8002cc8 <__libc_init_array+0x3c>)
 8002c94:	1b64      	subs	r4, r4, r5
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	42a6      	cmp	r6, r4
 8002c9a:	d109      	bne.n	8002cb0 <__libc_init_array+0x24>
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	f000 f821 	bl	8002ce4 <_init>
 8002ca2:	4d0a      	ldr	r5, [pc, #40]	; (8002ccc <__libc_init_array+0x40>)
 8002ca4:	4c0a      	ldr	r4, [pc, #40]	; (8002cd0 <__libc_init_array+0x44>)
 8002ca6:	1b64      	subs	r4, r4, r5
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	42a6      	cmp	r6, r4
 8002cac:	d105      	bne.n	8002cba <__libc_init_array+0x2e>
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
 8002cb0:	00b3      	lsls	r3, r6, #2
 8002cb2:	58eb      	ldr	r3, [r5, r3]
 8002cb4:	4798      	blx	r3
 8002cb6:	3601      	adds	r6, #1
 8002cb8:	e7ee      	b.n	8002c98 <__libc_init_array+0xc>
 8002cba:	00b3      	lsls	r3, r6, #2
 8002cbc:	58eb      	ldr	r3, [r5, r3]
 8002cbe:	4798      	blx	r3
 8002cc0:	3601      	adds	r6, #1
 8002cc2:	e7f2      	b.n	8002caa <__libc_init_array+0x1e>
 8002cc4:	08002d6c 	.word	0x08002d6c
 8002cc8:	08002d6c 	.word	0x08002d6c
 8002ccc:	08002d6c 	.word	0x08002d6c
 8002cd0:	08002d70 	.word	0x08002d70

08002cd4 <memset>:
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	1882      	adds	r2, r0, r2
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d100      	bne.n	8002cde <memset+0xa>
 8002cdc:	4770      	bx	lr
 8002cde:	7019      	strb	r1, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	e7f9      	b.n	8002cd8 <memset+0x4>

08002ce4 <_init>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr

08002cf0 <_fini>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr
